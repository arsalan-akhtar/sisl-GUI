{"version":3,"sources":["apis/PythonApi.js","redux/actions/index.js","redux/actions/actionTypes.js","components/Navbar.js","apis/history.js","routes/Route.js","components/PlotCard.js","components/PlotDashboard.js","components/StructureTag.js","components/StructurePicker.js","redux/reducers/session.js","redux/reducers/plots.js","redux/reducers/structures.js","redux/reducers/tabs.js","redux/reducers/active.js","redux/reducers/loading.js","redux/reducers/persist.js","redux/reducers/index.js","components/PlotInitializer.js","pages/Plots.js","components/settings/QueriesField.js","components/settings/InputField.js","components/settings/SettingsContainer.js","pages/Settings.js","pages/PlotTweaking.js","routes/index.js","redux/store/index.js","components/loading/LoadingChip.js","components/loading/LoadingTracker.js","App.js","serviceWorker.js","index.js"],"names":["tabAdress","tabID","tabsAdress","plotAdress","plotID","plotsAdress","_requestToApi","adress","request","responseHandler","fetch","apiAdress","headers","then","response","json","statusCode","alert","error","plot","figure","JSON","parse","catch","console","log","_get","method","_post","_put","_delete","_updateSettings","newSettings","callback","body","stringify","settings","action","_undoSettings","_save","params","_load","getSessionSettings","sessionAdress","session","updateSessionSettings","sessionID","undoSessionSettings","saveSession","loadSession","getAvailableStructs","structsAdress","structures","getSessionTabs","tabs","addNewTab","newtabAdress","removeTab","updateTabParams","newTabParams","getPlotOptions","plotTypesAdress","plotOptions","getPlot","getNewPlot","updatePlotSettings","undoPlotSettings","removePlot","showPlotFullScreen","askForUpdates","justUpdated","document","dispatchEvent","CustomEvent","detail","listenForPlotUpdates","sleepTime","stopListeningPlotUpdates","listenerID","setTimeout","update","clearTimeout","undefined","this","setCurrentSession","listenForUpdates","PythonApi","updateInterval","type","addPlots","newPlots","tabsIDs","setNewStructures","newStructures","setSessionTabs","setActivePlot","activePlot","setActiveTab","tab","activeTab","setActiveStructs","structs","informLoadingPlot","informLoadedPlot","AppNavbar","brand","alignLinks","className","href","Component","connect","dispatch","clearSession","history","createBrowserHistory","RouteWrapper","component","isPrivate","rest","to","defaultProps","PlotCard","props","id","active","reqParams","setPlotAsActive","state","isLoading","style","borderRadius","textAlign","color","layout","backColor","paper_bgcolor","layoutSettings","_","groupBy","reduce","map","param","key","nestedLayoutParams","unflatten","delimiter","xaxis","yaxis","DragHandle","sortableHandle","cursor","dragHandle","sortable","data-tip","justifyContent","alignItems","paddingTop","background","overflow","display","flexDirection","flex","padding","useResizeHandler","width","height","plotStyle","data","frames","onClick","onUpdate","warn","multiline","disable","showTooltips","SortableItem","SortableElement","s","m","l","SortableList","SortableContainer","plots","index","PlotDashboard","onSortEnd","oldIndex","newIndex","setTabPlots","arrayMove","find","axis","useDragHandle","transitionDuration","StructureTag","struct","selected","toggleStruct","name","replace","StructurePicker","togglePlotInitializer","forceShow","forceHide","selectStructs","length","structID","xor","selectedStructs","toggleAlphabeticSorting","toggles","setState","alphabeticSorting","toggleSelectedSorting","selectedSorting","toggleAll","onDisplay","Object","keys","filterStructs","onDisplaySelected","intersection","filter","includes","searchString","wildcard","str","RegExp","test","newSearchString","displayedStructures","orderBy","value","onChange","e","target","marginBottom","values","activeStructs","mapDispatchToProps","defaultState","newState","settingKey","omit","loading","from","Date","persist","whitelist","reducer","persistReducer","storage","combineReducers","browser","createResponsiveStateReducer","small","medium","selectActiveStructs","PlotInitializer","toggleVisibility","visible","updateInitializingOptions","forEach","plotClass","processID","uuidv4","Event","animation","listener","addEventListener","removeEventListener","loadingMessage","marginLeft","marginRight","actions","right","options","placeholder","isClearable","isSearchable","isMulti","obj","label","defaultValue","checked","Plots","syncWithSession","updateTabs","newTab","last","iDeletedTab","findIndex","Math","min","updateTabName","blur","textContent","plotToInitialize","saveCurrentSession","path","prompt","rootDir","renderNewPlotButton","isInitializerDisplaying","addNewPlotBut","floating","icon","fab","direction","hoverEnabled","displayPlotInitializer","large","loadingPlots","sessionFinder","setInterval","clearInterval","indexOf","tabName","contentEditable","onBlur","onKeyUp","keyCode","flexWrap","paddingRight","addTabs","newTabs","QueriesField","toggleColorPicker","pickerID","displayColorPicker","addQuery","newQuery","setting","inputField","queryForm","queryParam","default","changeSettingValue","iQuery","paramKey","paramValue","newValue","cloneDeep","renderInputField","fieldLayout","noLayout","paddingBottom","Array","isArray","val","String","colorPicker","position","bottom","onChangeComplete","hex","paddingLeft","Number","marginTop","w","renderQuery","query","InputField","string","isSizeDefined","sizeLabel","i","mediaType","split","substr","changeSettings","onSettingChangeType","tooltipParams","help","actionType","SettingsContainer","renderSettingsGroup","settingsGroup","renderSettingsGroups","groupedParams","paramGroups","paramGroup","groupKey","subGrouped","itemContent","subGroups","fontWeight","fontSize","header","description","undoSettings","margin","left","submitSettings","popout","Settings","isEmpty","PlotTweaking","setsCont","maxHeight","Routes","exact","LoadingChip","getLoadingTime","loadingInit","moment","diff","format","time","now","interval","processName","info","join","elapsed","LoadingTracker","loadingInfo","store","createStore","rootReducer","responsiveStoreEnhancer","persistor","persistStore","getStoreAndPersistor","App","Navbar","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c3a27a1a.chunk.js","sourcesContent":["\n//This class will contain all the fetches to the python API\nclass PythonApi {\n\n    constructor(){\n\n        this.apiAdress = 'http://localhost:4000'\n\n        this.listenerID = undefined\n\n    }\n\n    //ADDRESSES\n    get sessionAdress(){\n        return \"/sislGUI/session\"\n    }\n\n    get tabsAdress(){\n        return \"/sislGUI/tab\"\n    }\n\n    get newtabAdress(){\n        return this.tabsAdress + \"/new\"\n    }\n\n    tabAdress = (tabID) => {\n        return this.tabsAdress + \"/\" + tabID\n    }\n\n    get plotsAdress(){\n        return \"/sislGUI/plot\"\n    }\n\n    plotAdress = (plotID) => {\n        return this.plotsAdress + \"/\" + plotID\n    }\n\n    get plotTypesAdress(){\n        return \"/sislGUI/plotTypes\"\n    }\n\n    get structsAdress(){\n        return \"/sislGUI/structs\"\n    }\n\n    //MOST LOW LEVEL METHODS (Should not be used directly)\n    _requestToApi = (adress, request, responseHandler ) => {\n\n        fetch(this.apiAdress + adress, \n      {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        ...request\n    })\n      .then(response => response.json())\n      .then(response => {\n        if (response.statusCode >= 400){\n            alert(response.error)\n        } else {\n\n            //The plot figure comes double JSON encoded (Plotly encoding + flask encoding)\n            if (response.plot){\n\n                response = {\n                    ...response,\n                    plot: {\n                        ...response.plot,\n                        figure: JSON.parse(response.plot.figure)\n                    }\n                }\n            }\n\n            responseHandler(response)\n        }\n      })\n      .catch((error) => {\n          console.log(error)\n          //alert(\"Can not connect to the API, are you sure it is running? If so, check your API adress in settings.\")\n      })\n    }\n\n    _get = (adress, {request, responseHandler}) => {\n        this._requestToApi(adress, {...request, method: 'GET'}, responseHandler)\n    }\n\n    _post = (adress, {request, responseHandler}) => {\n        this._requestToApi(adress, {...request, method: 'POST'}, responseHandler)\n    }\n\n    _put = (adress, {request, responseHandler}) => {\n        this._requestToApi(adress, {...request, method: 'PUT'}, responseHandler)\n    }\n\n    _delete = (adress, {request, responseHandler}) => {\n        this._requestToApi(adress, {...request, method: 'DELETE'}, responseHandler)\n    }\n\n    //A BIT HIGHER LEVEL METHODS (to be used by high level methods below)\n    _updateSettings = (adress, newSettings, callback = () => {}) => {\n        this._post(adress, {request: {body: JSON.stringify({settings: newSettings, action: \"updateSettings\"})}, responseHandler: callback})\n    }\n\n    _undoSettings = (adress, callback = () => {}) => {\n        this._post(adress, {request: {body: JSON.stringify({action: \"undoSettings\"})}, responseHandler: callback})\n    }\n\n    _save = (adress, params, callback = () => {}) => {\n        this._post(adress, {request: {body: JSON.stringify({action: \"save\", ...params})}, responseHandler: callback})\n    }\n\n    _load = (adress, params, callback = () => {}) => {\n        this._post(adress, {request: {body: JSON.stringify({action: \"load\", ...params})}, responseHandler: callback})\n    }\n\n\n    //HIGH LEVEL METHODS (should be used by components)\n\n    getSessionSettings = (callback = () => {}) => {\n        this._get(this.sessionAdress, {responseHandler: (response) => callback(response.session)} )\n    }\n\n    updateSessionSettings = ( sessionID, newSettings, callback = () => {}) => {\n        this._updateSettings(this.sessionAdress, newSettings, (response) => callback(response.session))\n    }\n\n    undoSessionSettings = ( sessionID, callback = () => {}) => {\n\n        this._undoSettings(this.sessionAdress, (response) => callback(response.session))\n    }\n\n    saveSession = (params, callback = () => {}) => {\n        this._save(this.sessionAdress, params, (response) => callback(response.session, params))\n    }\n\n    loadSession = (params, callback = () => {}) => {\n        this._load(this.sessionAdress, params, (response) => callback(response.session, params))\n    }\n\n    getAvailableStructs = (callback = () => {}) => {\n\n        this._get(this.structsAdress, {responseHandler: (response) => callback(response.structures)} )\n        \n    }\n\n    getSessionTabs = (callback = () => {}) => {\n\n        this._get(this.tabsAdress, {responseHandler: (response) => callback(response.tabs)} )\n        \n    }\n\n    addNewTab = (callback = () => {}) => {\n\n        this._get(this.newtabAdress, {responseHandler: (response) => callback(response.tabs)} )\n        \n    }\n\n    removeTab = (tabID, callback = () => {}) => {\n\n        this._delete(this.tabAdress(tabID), {responseHandler: (response) => callback(response.tabs)} )\n        \n    }\n\n    updateTabParams = (tabID, newTabParams, callback = () => {}) => {\n\n        this._put(this.tabAdress(tabID), {request: {body: JSON.stringify(newTabParams)}, responseHandler: (response) => callback(response.tabs)} )\n        \n    }\n\n    getPlotOptions = (callback = () => {}) => {\n        this._get(this.plotTypesAdress, {responseHandler: (response) => callback(response.plotOptions)} )\n    }\n\n    getPlot = (plotID, callback = () => {}) => {\n\n        this._get(this.plotAdress(plotID), {responseHandler: (response) => callback(response.plot)})\n    }\n\n    getNewPlot = (params, callback = () => {}) => {\n\n        this._post(this.plotsAdress, {request: {body: JSON.stringify(params)}, responseHandler: (response) => callback(response.plot, params)})\n    }\n\n    updatePlotSettings = ( plotID, newSettings, callback = () => {}) => {\n\n        this._updateSettings(this.plotAdress(plotID), newSettings, (response) => callback(response.plot))\n    }\n\n    undoPlotSettings = ( plotID, callback = () => {}) => {\n\n        this._undoSettings(this.plotAdress(plotID), (response) => callback(response.plot))\n    }\n\n    removePlot = (params, callback = () => {}) => {\n\n        this._delete(this.plotAdress(params.plotID), { responseHandler: (response) => callback(response.session,params)})\n    }\n\n    showPlotFullScreen = ( plotID, callback = () => {}) => {\n        this._post(this.plotAdress(plotID), {request: {body: JSON.stringify({action: \"fullScreen\"})}, responseHandler: (response) => callback(response.plot)})\n    }\n\n    askForUpdates = (callback = (session, justUpdated) => {document.dispatchEvent(new CustomEvent(\"sessionUpdate\", {detail: {session, justUpdated}}))}) => {\n        /*Uses the commit_updates method of the Session class */\n        this._post(this.sessionAdress, {request: {body: JSON.stringify({action: \"updatePlots\"})}, responseHandler: (response) => callback(response.session, response.justUpdated)})\n    }\n\n    listenForPlotUpdates = (sleepTime) => {\n\n        this.stopListeningPlotUpdates()\n\n        const update = () => {\n            this.askForUpdates()\n            clearTimeout(this.listenerID)\n            this.listenerID = setTimeout(update, sleepTime); // (*)\n        }\n\n        this.listenerID = setTimeout(update, sleepTime);\n    }\n\n    stopListeningPlotUpdates = () => {\n        if (this.listenerID){\n            clearTimeout(this.listenerID)\n        }\n\n        this.listenerID = undefined\n        \n    }\n\n}\n\nexport default new PythonApi();","import { \n    ADD_PLOTS,\n    REMOVE_PLOT,\n    ADD_TABS,\n    SET_STRUCTURES,\n    SET_TAB_PLOTS,\n    SET_SESSION_TABS,\n    SET_ACTIVE_PLOT,\n    SET_ACTIVE_TAB,\n    CLEAR_SESSION,\n    SET_SESSION,\n    CHANGE_PLOT_SETTINGS,\n    SET_ACTIVE_STRUCTS,\n    START_LOADING_PLOT,\n    END_LOADING_PLOT\n} from './actionTypes'\n\nimport PythonApi from \"../../apis/PythonApi\"\n\nexport const setCurrentSession = (session) => {\n    \n    if (session.settings.listenForUpdates){\n        PythonApi.listenForPlotUpdates(session.settings.updateInterval)\n    } else {\n        PythonApi.stopListeningPlotUpdates()\n    }\n\n    return {\n        type: SET_SESSION,\n        session\n    }\n}\n    \nexport const addPlots = (newPlots, tabsIDs) => ({\n    type: ADD_PLOTS,\n    newPlots,\n    tabsIDs\n})\n\nexport const removePlot = (plotID, tabID) => ({\n    type: REMOVE_PLOT,\n    plotID,\n    tabID\n})\n\nexport const changeSettings = (actionType, settingKey, value) => ({\n    type: actionType, //Valid action types are all of type CHANGE_<something>_SETTINGS\n    settingKey,\n    value\n})\n\nexport const addTabs = (newTabs) => ({\n    type: ADD_TABS,\n    newTabs\n})\n\nexport const setNewStructures = (newStructures) => ({\n    type: SET_STRUCTURES,\n    newStructures\n})\n\nexport const setTabPlots = (tabID, plots) => ({\n    type: SET_TAB_PLOTS,\n    tabID,\n    plots\n})\n\nexport const setSessionTabs = (tabs) => ({\n    type: SET_SESSION_TABS,\n    tabs\n})\n\nexport const setActivePlot = (plot) => ({\n    type: SET_ACTIVE_PLOT,\n    activePlot: plot\n})\n\nexport const setActiveTab = (tab) => ({\n    type: SET_ACTIVE_TAB,\n    activeTab: tab\n})\n\nexport const clearSession = () => ({\n    type: CLEAR_SESSION,\n})\n\nexport const setActiveStructs = (structs) => ({\n    type: SET_ACTIVE_STRUCTS,\n    structs: structs\n})\n\nexport const informLoadingPlot = (plot) => ({\n    type: START_LOADING_PLOT,\n    plot\n})\n\nexport const informLoadedPlot = (plotID) => ({\n    type: END_LOADING_PLOT,\n    plotID\n})\n\n\n\n","export const ADD_PLOTS = 'ADD_PLOTS'\nexport const REMOVE_PLOT = 'REMOVE_PLOT'\nexport const CHANGE_PLOT_SETTINGS = 'CHANGE_PLOT_SETTINGS'\nexport const ADD_TABS = 'ADD_TABS'\nexport const SET_STRUCTURES = 'SET_STRUCTURES'\nexport const SET_TAB_PLOTS = 'SET_TAB_PLOTS'\nexport const SET_SESSION_TABS = 'SET_SESSION_TABS'\nexport const SET_ACTIVE_PLOT = 'SET_ACTIVE_PLOT'\nexport const SET_ACTIVE_TAB = 'SET_ACTIVE_TAB'\nexport const SET_SESSION = 'SET_SESSION'\nexport const CHANGE_SESSION_SETTINGS = 'CHANGE_SESSION_SETTINGS'\nexport const CLEAR_SESSION = 'CLEAR_SESSION'\nexport const SET_ACTIVE_STRUCTS = 'SET_ACTIVE_STRUCTS'\nexport const START_LOADING_PLOT = 'START_LOADING_PLOT'\nexport const END_LOADING_PLOT = 'END_LOADING_PLOT'\n\n","import React, { Component } from 'react'\nimport {Navbar, NavItem, Icon} from 'react-materialize';\n\n//--Redux\nimport { connect } from 'react-redux'\nimport {clearSession} from \"../redux/actions\"\n\nclass AppNavbar extends Component {\n    render() {\n        return (\n            <Navbar brand={<a />} alignLinks=\"right\" className=\"transparent z-depth-0\">\n                <NavItem className=\"blackText\" href=\"/plots\">\n                    Plots\n                </NavItem>\n                <NavItem href=\"/settings\">\n                    <Icon>settings</Icon>\n                </NavItem>\n                <NavItem href=\"/settings\">\n                    <Icon>help</Icon>\n                </NavItem>\n            </Navbar>\n            \n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    clearSession: () => dispatch(clearSession()),\n})\n\nexport default connect(null, mapDispatchToProps)(AppNavbar);\n","import { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\n\nexport default history;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport default function RouteWrapper({\n  component: Component,\n  isPrivate,\n  ...rest\n}) {\n  const signed = false;\n\n  /**\n   * Redirect user to SignIn page if he tries to access a private route\n   * without authentication.\n   */\n  if (isPrivate && !signed) {\n    return <Redirect to=\"/\" />;\n  }\n\n  /**\n   * Redirect user to Main page if he tries to access a non private route\n   * (SignIn or SignUp) after being authenticated.\n   */\n  if (!isPrivate && signed) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  /**\n   * If not included on both previous cases, redirect user to the desired route.\n   */\n  return <Route {...rest} component={Component} />;\n}\n\nRouteWrapper.propTypes = {\n  isPrivate: PropTypes.bool,\n  component: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired\n};\n\nRouteWrapper.defaultProps = {\n  isPrivate: false\n};\n","import React, { Component } from 'react'\nimport Plot from 'react-plotly.js';\nimport { Card, Row, Icon } from 'react-materialize';\n\nimport { CircleLoader} from 'react-spinners';\nimport ReactTooltip from \"react-tooltip\"\nimport {\n    sortableHandle,\n} from \"react-sortable-hoc\";\n\nimport _ from \"lodash\"\nimport {unflatten} from \"flat\"\n\n//--Redux\nimport { connect } from 'react-redux'\nimport { setActivePlot, removePlot, setSessionTabs} from \"../redux/actions\"\nimport PythonApi from '../apis/PythonApi';\n\nclass PlotCard extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            isLoading: false,\n        }\n\n    }\n\n    removePlot = () => {\n        PythonApi.removePlot({ plotID: this.props.plot.id, tabID: this.props.active.tab}, (session, reqParams) => {\n            this.props.setSessionTabs(session.tabs)\n            this.props.removePlot(reqParams.plotID)\n        })\n        \n    }\n\n    setPlotAsActive = () => {\n        this.props.setActivePlot(this.props.plot)\n    }\n\n    showPlotFullScreen = () => {\n        PythonApi.showPlotFullScreen(this.props.plot.id)\n    }\n\n    render() {\n\n        if (this.state.isLoading || !this.props.plot) {\n            return (\n                <Card \n                    className=\"plotcard\"\n                    style={{borderRadius: 15}}>\n                    <Row style={{textAlign: \"center\"}}>\n                        <CircleLoader color=\"#36D7B7\"/>\n                    </Row>\n                    <div>We are working hard to load your plot.</div>\n                </Card>\n            )\n        }\n\n        let layout = this.props.plot.figure.layout;\n        let backColor = this.props.plot.settings.paper_bgcolor || \"white\"\n\n        //If this is the active plot, we are going to overwrite the layout with the settings (so that user is able to see a preview)\n        if (this.props.active.plot && this.props.active.plot.id == this.props.plot.id){\n\n            backColor = this.props.active.plot.settings.paper_bgcolor || \"white\"\n\n            // let layoutSubGroups = _.groupBy( _.groupBy(this.props.active.plot.params, \"group\")[\"layout\"] , \"subGroup\")\n\n            // layout = {\n            //     ...layout,\n            //     ...layoutSubGroups[\"undefined\"].reduce((map, param) => {map[param.key] = this.props.active.plot.settings[param.key]; return map}, {} ),\n            //     \"xaxis\": {\n            //         ...layout.xaxis,\n            //         ...layoutSubGroups[\"xaxis\"].reduce((map, param) => {map[param.key.split(\"_\").pop()] = this.props.active.plot.settings[param.key]; return map}, {}),\n            //     },\n            //     \"yaxis\": {\n            //         ...layout.yaxis,\n            //         ...layoutSubGroups[\"yaxis\"].reduce((map, param) => {map[param.key.split(\"_\").pop()] = this.props.active.plot.settings[param.key]; return map}, {} ),\n            //     }\n\n            // }\n\n            let layoutParams = _.groupBy(this.props.active.plot.params, \"group\")[\"layout\"]\n\n            let layoutSettings = layoutParams.reduce((map,param) => {map[param.key] = this.props.active.plot.settings[param.key]; return map},{})\n\n            let nestedLayoutParams = unflatten( layoutSettings, {delimiter: \"_\"})\n\n\n            layout = {\n                ...layout,\n                ...layoutSettings,\n                \"xaxis\": {\n                    ...layout.xaxis,\n                    ...nestedLayoutParams.xaxis\n                },\n                \"yaxis\": {\n                    ...layout.yaxis,\n                    ...nestedLayoutParams.yaxis\n                }\n\n            }\n            \n        }\n        \n        const DragHandle = sortableHandle(() => <div style={{cursor: \"pointer\"}}><Icon className=\"small grey-text\" >drag_handle</Icon></div>);\n\n        const dragHandle = this.props.sortable ? (\n            <div\n                data-tip=\"Drag the plot to change its position\"\n                style={{justifyContent: \"center\", alignItems: \"center\", textAlign: \"center\", paddingTop: \"20px\", background: backColor}}>\n                <DragHandle/>\n            </div>) : null;\n\n        return (\n            \n            <Card\n                className=\"plotcard\"\n                style={{borderRadius: 15, overflow: \"hidden\"}}>\n                <div style={{display: \"flex\", flexDirection: \"column\", ...this.props.style}}>\n                    {dragHandle}\n                    <div style={{flex:1, padding: \"10px 10px 0 10px\", background: backColor}}>\n                        <Plot\n                            useResizeHandler\n                            style={{ width: \"auto\", height: \"100%\", ...this.props.plotStyle}}\n                            data={this.props.plot.figure.data}\n                            layout={layout}\n                            frames={this.props.plot.figure.frames}\n                            onClick={(data) => console.log(data)}\n                            onUpdate={(figure) => console.warn(figure)}\n                        />\n                    </div>\n                    <div style={{display: \"flex\"}} className=\"card-action\">\n                        <div style={{flex:1, textAlign: \"left\"}}>\n                            <a data-tip=\"Full screen\" href=\"#\" onClick={this.showPlotFullScreen}><Icon>fullscreen</Icon></a> \n                        </div>\n\n                        <div>\n                            <a\n                                data-tip=\"Edit\"\n                                href=\"/plotTweaking\"\n                                onClick={this.setPlotAsActive}><Icon>edit</Icon></a>\n                            <a data-tip=\"Export data\" href=\"#\"><Icon>file_download</Icon></a>\n                            <a data-tip=\"Remove\" href=\"#\" className=\"red-text\" onClick={this.removePlot}><Icon className=\"removePlot\">delete</Icon></a>\n                        </div>\n                        \n                    </div>  \n                </div>\n                <ReactTooltip multiline disable={this.props.session.settings ? !this.props.session.settings.showTooltips : false}/>\n            </Card>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    active: state.active,\n    session: state.session\n})\n\nconst mapDispatchToProps = dispatch => ({\n    setSessionTabs: (tabs) => dispatch(setSessionTabs(tabs)),\n    setActivePlot: (plot) => dispatch(setActivePlot(plot)),\n    removePlot: (plotID, tabID) => dispatch(removePlot(plotID, tabID)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlotCard);\n","import React, { Component } from \"react\";\n\nimport _ from \"lodash\"\n\n//--Components\nimport {\n  SortableContainer,\n  SortableElement,\n  arrayMove\n} from \"react-sortable-hoc\";\nimport PlotCard from \"./PlotCard\";\nimport { Col, Row} from \"react-materialize\";\n\n//--Redux\nimport { connect } from 'react-redux'\nimport {addPlot, setTabPlots} from \"../redux/actions\"\n\nconst SortableItem = SortableElement(({ plot }) => (\n  <Col s={12} m={6} l={4}>\n    <PlotCard plot={plot} sortable plotStyle={{height: \"65vh\"}}/>\n  </Col>\n));\n\nconst SortableList = SortableContainer(({ plots }) => {\n  return (\n    <Row>\n      {plots.map((plot, index) => (\n        <SortableItem key={index} index={index} plot={plot} />\n      ))}\n    </Row>\n  );\n});\n\nclass PlotDashboard extends Component {\n\n  onSortEnd = ({ oldIndex, newIndex }) => {\n\n    this.props.setTabPlots(\n      this.props.active.tab,\n      arrayMove( _.find(this.props.tabs,[\"id\", this.props.active.tab]).plots, oldIndex, newIndex)\n    );\n  };\n\n  render() {\n\n    if (!this.props.active.tab ) return null\n\n    let tab = _.find(this.props.tabs, [\"id\", this.props.active.tab])\n\n    if (!tab) return null\n    \n    let plots = tab.plots.map(plotID => this.props.plots[plotID])\n\n    return (\n      <div>\n        <SortableList\n          axis=\"xy\"\n          useDragHandle\n          transitionDuration={0}\n          plots={plots}\n          onSortEnd={this.onSortEnd}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  plots: state.plots,\n  structures: state.structures,\n  tabs: state.tabs,\n  active: state.active\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setTabPlots: (tabID, plots) => dispatch(setTabPlots(tabID, plots)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlotDashboard);","import React, { Component } from 'react'\n\n\nexport default class StructureTag extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {}\n    }\n\n    render() {\n        return (\n            <div className={\"structTag \" + (this.props.struct.selected ? \"active\" : \"\")} onClick={this.props.toggleStruct}>\n                {this.props.struct.name.replace(\".fdf\", \"\")}\n            </div>\n        )\n    }\n}\n\n\n\n\n","import React, { Component } from 'react'\nimport StructureTag from './StructureTag'\nimport _ from \"lodash\"\nimport { setActiveStructs } from '../redux/actions'\n\nimport { connect } from 'react-redux'\n\nfunction wildTest(wildcard, str) {\n    const re = new RegExp(`^${wildcard.replace(/\\*/g,'.*').replace(/\\?/g,'.')}$`,'i');\n    return re.test(str); // remove last 'i' above to have case sensitive\n}\n\nexport class StructurePicker extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            searchString: \"\",\n            alphabeticSorting: false,\n            selectedSorting: false,\n            displayedStructures: props.structures\n        }\n\n    }\n\n    togglePlotInitializer = ({forceShow, forceHide}) => {\n\n        document.dispatchEvent(new CustomEvent(\"togglePlotInitializer\", {detail: {forceShow, forceHide}}))\n\n    }\n\n    selectStructs = (structs) => {\n        this.props.setActiveStructs(structs)\n\n        if (structs.length != 0){\n            this.togglePlotInitializer({forceShow: true})\n        } else {\n            this.togglePlotInitializer({forceHide: true})\n        }\n    }\n\n    get selectedStructs(){\n        return this.props.activeStructs || []\n    }\n\n    toggleStruct = ({id: structID}) => {\n        \n        //this.setState({selectedStructures: _.xor(this.selectedStructs, [structID])})\n\n        this.selectStructs(_.xor(this.selectedStructs, [structID]))\n      \n    }\n\n    toggleAlphabeticSorting = () => {\n\n        const toggles = { [false]: \"asc\", asc: \"desc\", desc: false}\n        this.setState({alphabeticSorting: toggles[this.state.alphabeticSorting]})\n    }\n\n    toggleSelectedSorting = () => {\n        this.setState({selectedSorting: !this.state.selectedSorting})\n    }\n\n    toggleAll = () => {\n\n        const onDisplay = Object.keys(this.filterStructs())\n\n        const onDisplaySelected = _.intersection(this.selectedStructs, onDisplay).length == 0\n\n        this.selectStructs(onDisplaySelected ? \n            [...onDisplay, ...this.selectedStructs] \n                : \n            this.selectedStructs.filter( structID => !onDisplay.includes(structID) )\n        )\n\n        // this.setState({selectedStructures: onDisplaySelected ? \n        //     [...onDisplay, ...this.selectedStructs] \n        //         : \n        //     this.selectedStructs.filter( structID => !onDisplay.includes(structID) ) \n        // })\n    }\n\n    filterStructs = (searchString) => {\n\n        searchString = searchString || this.state.searchString\n\n        searchString = searchString.includes(\"*\") || searchString.includes(\"?\") ? searchString : \"*\"+searchString+\"*\"\n\n        return Object.keys(this.props.structures).reduce( (structs, structID) => {\n\n            const struct = this.props.structures[structID]\n\n            if (wildTest(searchString, struct.name.replace(\".fdf\", \"\"))){\n\n                structs[structID] = { \n                    ...struct,\n                    selected: this.selectedStructs.includes(structID),\n                    id: structID,\n                }\n            }\n\n            return structs\n        }, {})\n\n    }\n\n    newSearchString = (searchString) => {\n\n        this.setState({searchString: searchString})\n    }\n\n    render() {\n\n        let structs = this.filterStructs()\n\n        if (this.state.alphabeticSorting){\n            structs = _.orderBy(structs, \"name\", this.state.alphabeticSorting)\n        }\n        if (this.state.selectedSorting){\n            structs = _.orderBy(structs, \"selected\", \"desc\")\n        }\n        \n        return (\n            <div>\n                <input\n                    value={this.state.searchString} \n                    onChange={(e) => this.newSearchString(e.target.value)}/>\n                <div style={{display: \"flex\", justifyContent: \"space-between\", marginBottom: 5}}>\n                    <span \n                        className={\"structPickerToggle \" + (this.state.alphabeticSorting ? \"active\" : \"\")} \n                        onClick={this.toggleAlphabeticSorting} style={{cursor: \"pointer\"}}>A-Z</span>\n                    <span \n                        className={\"structPickerToggle \" + (this.state.selectedSorting ? \"active\" : \"\")}\n                        onClick={this.toggleSelectedSorting} style={{cursor: \"pointer\"}}>sel</span>\n                    <span \n                        className=\"structPickerToggle\" \n                        onClick={this.toggleAll} style={{cursor: \"pointer\"}}>All</span>\n                </div>\n\n                <div className=\"scrollView\" style={{height: \"90vh\"}}>\n                    {Object.values(structs).map(struct => {\n                        return <StructureTag id={struct.id} \n                            struct={struct} \n                            toggleStruct={ () => this.toggleStruct(struct)}\n                        />\n                    })}\n                </div>  \n            </div>\n            \n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    activeStructs: state.active.structs\n})\n\nconst mapDispatchToProps = {\n    setActiveStructs\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StructurePicker);\n","import { CLEAR_SESSION, SET_SESSION, CHANGE_SESSION_SETTINGS} from '../actions/actionTypes'\nimport _ from \"lodash\"\n\nconst defaultState = {}\n\nconst session = (state = defaultState, action) => {\n\n    switch (action.type) {\n        case SET_SESSION:\n            console.log(\"REDUX: Setting current session...\")\n            var newState = action.session\n            console.log(newState)\n\n            return newState\n        \n        case CHANGE_SESSION_SETTINGS:\n            console.log(\"REDUX: Changing current session settings (not submitting yet)...\")\n            var newState = {\n                ...state,\n                settings: {\n                    ...state.settings,\n                    [action.settingKey]: action.value\n                }\n            }\n            console.log(newState)\n            return newState\n\n        \n        case CLEAR_SESSION:\n            return defaultState\n\n        default:\n            return state\n    }\n}\n\nexport default session","import { ADD_PLOTS, CLEAR_SESSION, REMOVE_PLOT } from '../actions/actionTypes'\nimport _ from \"lodash\"\n\nconst defaultState = {};\n\nconst plots = (state = defaultState, action) => {\n    switch (action.type) {\n        case ADD_PLOTS:\n            console.log(\"REDUX: Storing a new plot...\")\n            let newState = {\n                ...state,\n                ...action.newPlots,\n            }\n            console.log(newState)\n            return newState\n        \n        case REMOVE_PLOT:\n            return _.omit(state, [action.plotID])\n        \n        case CLEAR_SESSION:\n            return defaultState\n            \n        default:\n            return state\n    }\n}\n\nexport default plots","import { SET_STRUCTURES, CLEAR_SESSION } from '../actions/actionTypes'\n\nconst defaultState = {}\n\nconst structures = (state = defaultState, action) => {\n    switch (action.type) {\n        case SET_STRUCTURES:\n            console.log(\"REDUX: Setting the new structures...\")\n            let newState = {\n                ...action.newStructures\n            }\n            console.log(newState)\n            return newState\n\n        default:\n            return state\n    }\n}\n\nexport default structures","import { CLEAR_SESSION, SET_SESSION_TABS} from '../actions/actionTypes'\nimport _ from \"lodash\"\n\nconst defaultState = []\n\nconst tabs = (state = defaultState, action) => {\n\n    switch (action.type) {\n        case SET_SESSION_TABS:\n            console.log(\"REDUX: Setting session tabs...\")\n            var newState = action.tabs\n            console.log(newState)\n\n            return newState\n        \n        case CLEAR_SESSION:\n            return defaultState\n\n        default:\n            return state\n    }\n}\n\nexport default tabs","import { \n    SET_ACTIVE_PLOT,\n    SET_ACTIVE_TAB,\n    CLEAR_SESSION,\n    CHANGE_PLOT_SETTINGS,\n    SET_ACTIVE_STRUCTS\n} from '../actions/actionTypes'\n\nconst defaultState = {plot: undefined, tab: undefined, structs: []};\n\nconst active = (state = defaultState, action) => {\n    switch (action.type) {\n        case SET_ACTIVE_PLOT:\n            console.log(\"REDUX: Setting active plot...\")\n            var newState = {\n                ...state,\n                plot: action.activePlot,\n            }\n            console.log(newState)\n            return newState\n        \n        case CHANGE_PLOT_SETTINGS:\n            console.log(\"REDUX: Changing plot settings (not submitting yet)...\")\n            var newState = {\n                ...state,\n                plot: {\n                    ...state.plot,\n                    settings: {\n                        ...state.plot.settings,\n                        [action.settingKey]: action.value\n                    }\n                },\n            }\n            console.log(newState)\n            return newState\n\n        case SET_ACTIVE_TAB:\n            console.log(\"REDUX: Setting active tab...\")\n            var newState = {\n                ...state,\n                tab: action.activeTab,\n            }\n            console.log(newState)\n            return newState\n        \n        case SET_ACTIVE_STRUCTS:\n            \n            var newState = {\n                ...state,\n                structs: action.structs,\n            }\n\n            return newState\n        \n        case CLEAR_SESSION:\n            return defaultState\n                \n        default:\n            return state\n    }\n}\n\nexport default active","import { \n    START_LOADING_PLOT,\n    END_LOADING_PLOT\n} from '../actions/actionTypes'\n\nimport _ from 'lodash';\n\nconst loading = (state = {plots:{}}, action) => {\n    switch (action.type) {\n        case START_LOADING_PLOT:\n            console.log(\"REDUX: Setting active plot...\")\n            var newState = {\n                ...state,\n                plots: {\n                    ...state.plots,\n                    [action.plot.id]: {\n                        ...action.plot,\n                        from: new Date()\n                    }\n                }\n            }\n            console.log(newState)\n            return newState\n        \n        case END_LOADING_PLOT:\n            console.log(\"REDUX: Changing plot settings (not submitting yet)...\")\n            var newState = {\n                ...state,\n                plots: _.omit(state.plots, [action.plotID]),\n            }\n            console.log(newState)\n            return newState\n                \n        default:\n            return state\n    }\n}\n\nexport default loading","import storage from \"redux-persist/lib/storage\"\nimport { persistReducer } from 'redux-persist';\nexport function persist(key, whitelist, reducer) {\n    return persistReducer({\n        key,\n        storage,\n        whitelist,\n    }, reducer);\n}","import { combineReducers } from 'redux'\nimport {createResponsiveStateReducer} from 'redux-responsive'\n\nimport session from './session'\nimport plots from './plots'\nimport structures from './structures'\nimport tabs from './tabs'\nimport active from './active'\nimport loading from './loading'\nimport { persist } from './persist'\n\nexport default combineReducers({\n    session,\n    plots,\n    structures,\n    tabs,\n    loading: persist('loading', ['plots'], loading),\n    active: persist( 'active', ['tab', 'plot'], active),\n    browser: createResponsiveStateReducer({\n        small: 600,\n        medium: 992,\n    })\n})\n\nexport const selectActiveStructs = (state) => {\n    return state.active.structs.map(structID => state.structures[structID])\n}","import React, { Component } from 'react'\n\nimport _ from \"lodash\"\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { Button, Row, Card, Col, Icon, Switch, Chip} from 'react-materialize'\nimport Select from 'react-select'\n\nimport PythonApi from '../apis/PythonApi'\n\nimport { connect } from 'react-redux'\nimport { selectActiveStructs } from '../redux/reducers'\nimport { setActiveTab, addPlots, setActiveStructs, informLoadingPlot, informLoadedPlot } from '../redux/actions'\n\nclass PlotInitializer extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            tabID: props.active.tab,\n            animation: false,\n            plotClass: undefined,\n            plotOptions: [],\n            visible: false\n        }\n        \n    }\n\n    get selectedStructs(){\n        return this.props.activeStructs || []\n    }\n\n    componentDidMount(){\n\n        this.listener = document.addEventListener(\"togglePlotInitializer\", this.toggleVisibility)\n\n        //Get the available plots\n        PythonApi.getPlotOptions( plotOptions => this.setState({plotOptions}) )\n    }\n\n    componentWillUnmount(){\n        document.removeEventListener(\"togglePlotInitializer\", this.toggleVisibility)\n    }\n\n    toggleVisibility = (e) => {\n\n        let visible;\n\n        if (e != undefined & e.detail != undefined) {\n            visible = e.detail.forceShow ? true : e.detail.forceHide? false : !this.state.visible\n        } else {\n            visible = !this.state.visible\n        }\n\n        this.setState({visible})\n    }\n\n    updateInitializingOptions = (key, value) => {\n        this.setState({ [key]: value})\n    }\n\n    getNewPlot = () => {\n\n        this.setState({isLoading: true})\n\n        this.selectedStructs.forEach( struct => {\n\n            let plotClasses = this.state.plotClass.length ? this.state.plotClass : [this.state.plotClass]\n\n            plotClasses.forEach( plotClass => {\n                \n                let processID = uuidv4()\n                this.props.informLoadingPlot({id: processID, struct: struct, plotClass: plotClass })\n            \n                PythonApi.getNewPlot({tabID: this.props.active.tab, struct: struct.id, ...this.state, plotClass: plotClass}, (plot, reqParams) => {\n\n                    this.props.addPlots({[plot.id]: plot})\n        \n                    this.props.setActiveTab(reqParams.tabID)\n                    this.setState({isLoading: false, visible: false})\n\n                    this.props.informLoadedPlot(processID)\n                    document.dispatchEvent(new Event(\"newPlot\"))\n        \n                })\n\n            })\n            \n            \n        })\n\n        this.props.setActiveStructs([])\n\n    }\n\n    render() {\n\n        if (this.props.tabs.length == 0) return null\n\n        let loadingMessage = this.state.isLoading ? <Row>We are getting your shiny new plot... wait a moment please :)</Row> : null\n\n        return (\n            <div className={\"plotInitializer\" + (this.state.visible ? \"\" : \" hidden\")}>\n\n                <Card\n                    style={{marginLeft: 20, marginRight: 20, background: \"#5588ff\"}}\n                    actions={\n                        <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", alignItems: \"center\"}}>\n\n                            <a\n                                className=\"btn-flat black-text initPlotBtn\"\n                                onClick={this.toggleVisibility}>\n                                Dismiss\n                                <Icon right>close</Icon>\n                            </a>\n\n                            <a \n                                className=\"btn-flat black-text initPlotBtn\"\n                                onClick={this.getNewPlot}\n                                >\n                                Initialize plot\n                                <Icon right>done</Icon>\n                            </a>\n\n                            <a className=\"btn-flat black-text initPlotBtn\"><Icon>refresh</Icon></a>\n                        </div>     \n                    }>\n                    <Row>\n                        <Col s={12} m={12} l={6}>\n                            <Row>Structures</Row>\n\n                            <div> {this.selectedStructs.map(struct => <div>{struct.name}</div>)} </div>\n\n                        </Col>\n                        \n                        <Col s={12} m={6} l={3}>\n                            <Row>Plot type</Row>\n                            <Select\n                                options={this.state.plotOptions}\n                                placeholder=\"Choose the plot type...\"\n                                isClearable isSearchable isMulti\n                                onChange={(obj) => this.updateInitializingOptions(\"plotClass\", obj ? obj.value || obj.map(selected => selected.value) : undefined)}/>\n                        </Col>\n                        \n                        <Col s={12} m={6} l={2}>\n                            <Row>Tab</Row>\n                            <Select\n                                placeholder=\"Choose a tab...\"\n                                options={this.props.tabs.map( (tab) => ({label: tab.name, value: tab.id }))}\n                                defaultValue={this.props.active.tab && _.find(this.props.tabs, [\"id\", this.props.active.tab])? {label: _.find(this.props.tabs, [\"id\", this.props.active.tab]).name, value: this.props.active.tab } : null}\n                                isClearable isSearchable\n                                onChange={(obj) => this.updateInitializingOptions(\"tabID\", obj ? obj.value : undefined)}/>\n                        </Col>\n\n                        <Col s={12} m={6} l={1}>\n                            <Row>Animation</Row>\n                            <Switch\n                                id=\"isAnimation\"\n                                checked={this.state.animation}\n                                onChange={(e) => this.updateInitializingOptions(\"animation\", e.target.checked) }/>\n                        </Col>\n                        \n                    </Row>\n                    {loadingMessage}\n                </Card>\n\n            </div>\n\n            \n            \n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    activeStructs: selectActiveStructs(state) ,\n    tabs: state.tabs,\n    active: state.active\n})\n\nconst mapDispatchToProps = {\n    setActiveTab,\n    addPlots,\n    setActiveStructs,\n    informLoadingPlot,\n    informLoadedPlot\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlotInitializer);\n","import React, { Component } from 'react'\n\nimport _ from \"lodash\"\n\n//--Components\nimport { Button, Row, Card, Col, Icon, Switch, Chip} from 'react-materialize'\nimport ReactTooltip from \"react-tooltip\"\nimport Select from 'react-select'\nimport PlotDashboard from '../components/PlotDashboard';\n\n//--Python api \nimport PythonApi from '../apis/PythonApi'\n\n//--Redux\nimport { connect } from 'react-redux'\nimport {addPlots, addTabs, setNewStructures, setActiveTab, setActivePlot, setSessionTabs, setCurrentSession} from \"../redux/actions\"\nimport StructurePicker from '../components/StructurePicker'\nimport PlotInitializer from '../components/PlotInitializer'\n\n\nclass Plots extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            displayPlotInitializer: false,\n            plotToInitialize: {\n                struct: false,\n                animation: false\n            },\n            loadingPlots: [],\n            plotOptions:[]\n        }\n\n        this.syncWithSession()\n\n        document.addEventListener(\"newPlot\", () => this.updateTabs())\n\n        document.addEventListener(\"sessionUpdate\", (e) => {\n            e.detail.justUpdated.forEach( plotID => {\n\n                console.log(plotID)\n                \n                this.setState({loadingPlots: [...this.state.loadingPlots, plotID]})\n                PythonApi.getPlot(plotID, plot => {\n                    this.props.addPlots({[plot.id]: plot})\n                    this.setState({loadingPlots: this.state.loadingPlots.filter(id => id != plotID)})\n                })\n\n            })\n\n        })\n            \n    }\n\n    syncWithSession = (session) => {\n\n        this.updateTabs()\n\n        PythonApi.getPlotOptions( plotOptions => this.setState({plotOptions}) )\n        PythonApi.getAvailableStructs( structures => this.props.setNewStructures(structures) )\n        \n        if (session){\n            this.props.setCurrentSession(session)\n        } else {\n            PythonApi.getSessionSettings(session => this.props.setCurrentSession(session))\n        }\n        \n    }\n\n    componentDidMount(){\n\n        // If there is no session, keep listening until there is one\n        if (Object.keys(this.props.session).length == 0){\n            let sessionFinder = setInterval(() => {\n                this.syncWithSession()\n                if( Object.keys(this.props.session).length == 0){\n                    clearInterval(sessionFinder)\n                }\n            }, 500)\n        }\n\n        this.props.setActivePlot(undefined)\n        \n    }\n\n    componentDidUpdate(){\n\n        let activeTab = _.find(this.props.tabs, [\"id\", this.props.active.tab]) \n        \n        if (!activeTab) return\n\n        //Get the missing plots if there are any\n        activeTab.plots.forEach(plotID => {\n\n            if ( !this.props.plots[plotID] && this.state.loadingPlots.indexOf(plotID) == -1){\n\n                this.setState({loadingPlots: [...this.state.loadingPlots, plotID]})\n                PythonApi.getPlot(plotID, plot => {\n                    this.props.addPlots({[plot.id]: plot})\n                    this.setState({loadingPlots: this.state.loadingPlots.filter(id => id != plotID)})\n                })\n                \n            }\n        })\n\n    }\n\n    updateTabs = (tabs) => {\n\n        if (tabs){\n            this.props.setSessionTabs(tabs)\n\n        } else {\n            PythonApi.getSessionTabs( tabs => {\n                this.props.setSessionTabs(tabs)\n                \n                let activeTab = _.find(tabs, [\"id\", this.props.active.tab])\n\n                if (!activeTab) this.props.setActiveTab( tabs.length > 0 ? tabs[0].id : undefined)\n            })\n        }\n\n    }\n\n    newTab = () => {\n\n        PythonApi.addNewTab( (tabs) => {\n            this.updateTabs(tabs)\n            this.props.setActiveTab(_.last(tabs).id)\n        })\n        \n\n    }\n\n    removeTab = (tabID) => {\n\n        let iDeletedTab = _.findIndex(this.props.tabs, [\"id\", tabID])\n\n        PythonApi.removeTab(tabID, (tabs) => {\n            this.props.setActiveTab(tabs.length > 0 ? tabs[Math.min(tabs.length - 1, iDeletedTab)].id : undefined)\n            this.updateTabs(tabs)\n        })\n\n    }\n\n    updateTabParams = (tabID, newTabParams) => {\n\n        PythonApi.updateTabParams(tabID, newTabParams, (tabs) => {\n            this.updateTabs(tabs)\n        })\n    }\n\n    updateTabName = (e) => {e.target.blur(); this.updateTabParams(e.target.id, {name: e.target.textContent})}\n\n    getNewPlot = () => {\n\n        this.setState({isLoading: true})\n\n        PythonApi.getNewPlot({tabID: this.props.active.tab, ...this.state.plotToInitialize}, (plot, reqParams) => {\n\n            this.updateTabs()\n            this.props.addPlots({[plot.id]: plot})\n\n            this.togglePlotInitializer()\n            this.props.setActiveTab(reqParams.tabID)\n            this.setState({isLoading: false})\n        })\n\n    }\n\n    saveCurrentSession = () => {\n        let path = prompt(\"Please provide the path to save the session.\\n\\nRoot directory:\\n\" + this.props.session.settings.rootDir)\n        if (!path) return \n\n        PythonApi.saveSession({path})\n        alert(\"Session saved\")\n    }\n\n    loadSession = () => {\n\n        let path = prompt(\"Please provide the path of the saved session.\\n\\nRoot directory:\\n\" + this.props.session.settings.rootDir)\n        if (!path) return\n\n        PythonApi.loadSession({path}, (session) => {\n            console.log(\"Session loaded\", session)\n            this.syncWithSession(session)\n        })\n    }\n\n    togglePlotInitializer = () => {\n\n        document.dispatchEvent(new Event(\"togglePlotInitializer\"))\n\n    }\n\n    updateInitializingOptions = (key, value) => {\n        this.setState({\n            plotToInitialize: {...this.state.plotToInitialize, [key]: value}\n        })\n    }\n\n    renderNewPlotButton = (isInitializerDisplaying) => {\n\n        let addNewPlotBut = isInitializerDisplaying ? null : (\n            <Button\n                data-tip=\"New plot\"\n                floating \n                onClick={this.togglePlotInitializer}\n                icon={<Icon>add</Icon>} className=\"green\" />\n        )\n\n        return <Button\n                    floating\n                    icon={<Icon>menu</Icon>}\n                    fab={{direction: 'left', hoverEnabled: false}}\n                    className={Object.keys(this.props.plots).length == 0 && !this.state.displayPlotInitializer? \"red pulse\" : \"red\"}\n                    large\n                >\n                    <ReactTooltip multiline disable={this.props.session.settings ? !this.props.session.settings.showTooltips : false}/>\n                    {addNewPlotBut}\n                    <Button\n                        data-tip=\"Save session\"\n                        floating\n                        icon={<Icon>save</Icon>} \n                        onClick={this.saveCurrentSession}\n                        className=\"yellow darken-1\" />\n                    <Button\n                        data-tip=\"Load session\"\n                        floating\n                        icon={<Icon>open_in_new</Icon>}\n                        onClick={this.loadSession}\n                        className=\"green\" />\n                    <Button floating icon={<Icon />} className=\"blue\" />\n                </Button>\n\n    }\n\n    render() {\n\n        let tabs = this.props.tabs.map( ({id: tabID, name: tabName}) => {\n\n            let active = tabID == this.props.active.tab\n\n            return <div\n                    key={tabID}\n                    className={active ? \"active plotTab\" : \"plotTab\"}\n                    onClick={active ? null : ()=> this.props.setActiveTab(tabID)}>\n                <div\n                    id={tabID}\n                    contentEditable={active}\n                    \n                    onBlur={this.updateTabName}\n                    onKeyUp={(e) => {if (e.keyCode === 13) this.updateTabName(e)}}\n                    >{tabName}</div>\n                {active ? <div className=\"removeTabBut\" onClick={() => this.removeTab(tabID)}><Icon>remove_circle</Icon></div> : null}\n            </div>\n        })\n\n        return (\n            <div className=\"row\">\n                <div className=\"col s12 m12 l1\">\n                    <StructurePicker structures={this.props.structures}/>   \n                </div>\n                <div className=\"col s12 l11\">\n                    <div style={{display: \"flex\", flexWrap: \"wrap\", alignItems:\"center\"}}>\n                        <div onClick={this.newTab} data-tip=\"New tab\">\n                            <Icon\n                                className=\"newTabIcon small blue-text text-darken-3\"\n                                style={{paddingRight: 0}}>create_new_folder</Icon>\n                        </div>\n                        {tabs}\n                    </div>\n                    <PlotInitializer/>\n                    <PlotDashboard/>\n                </div>\n                \n                <Row>\n                    {this.renderNewPlotButton(this.state.displayPlotInitializer)}\n                </Row>\n                \n                <ReactTooltip multiline disable={this.props.session.settings ? !this.props.session.settings.showTooltips : false}/>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    plots: state.plots,\n    structures: state.structures,\n    tabs: state.tabs,\n    active: state.active,\n    session: state.session\n})\n\nconst mapDispatchToProps = dispatch => ({\n    setCurrentSession: (session) => dispatch(setCurrentSession(session)),\n    setActiveTab: (tabID) => dispatch(setActiveTab(tabID)),\n    setSessionTabs: (tabs) => dispatch(setSessionTabs(tabs)),\n    setActivePlot: (plot) => dispatch(setActivePlot(plot)),\n    addPlots: (newPlots, tabsIDs) => dispatch(addPlots(newPlots, tabsIDs)),\n    addTabs: (newTabs) => dispatch(addTabs(newTabs)),\n    setNewStructures: (structures) => dispatch(setNewStructures(structures)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Plots);","import React, { Component } from 'react'\n\n//--Components\nimport { Card, TextInput, Switch, Button } from 'react-materialize'\nimport Select from \"react-select\"\nimport { ChromePicker } from \"react-color\"\nimport { Range } from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\nimport _ from \"lodash\"\n\nexport default class QueriesField extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            displayColorPicker: {}\n        }\n    }\n\n    toggleColorPicker = (pickerID) => {\n        this.setState({ displayColorPicker: {\n            ...this.state.displayColorPicker,\n            [pickerID] : ! this.state.displayColorPicker[pickerID]\n        } })\n    };\n\n    addQuery = () => {\n\n        let newQuery = this.props.setting.inputField.queryForm.reduce((map, queryParam) => {\n            map[queryParam.key] = queryParam.default || null\n            return map\n        }, {})\n\n        newQuery.active = true\n\n        this.props.changeSettingValue([...this.props.value, newQuery])\n    }\n\n    changeSettingValue = (iQuery, paramKey, paramValue) => {\n\n        let newValue = _.cloneDeep(this.props.value)\n\n        newValue[iQuery] = { ...newValue[iQuery], [paramKey]: paramValue}\n\n        this.props.changeSettingValue(newValue)\n    }\n\n    renderInputField = (queryParam, value, iQuery) => {\n\n        let inputField = queryParam.inputField\n\n        if (!inputField) return null\n\n        let fieldLayout;\n\n        if (inputField.type == \"textinput\"){\n\n            fieldLayout = <TextInput\n                    noLayout\n                    value={value}\n                    onChange={(e) => this.changeSettingValue(iQuery, queryParam.key, e.target.value)}\n                    label={queryParam.name}\n                    {...inputField.params}/>\n\n        } else if (inputField.type == \"switch\"){\n\n            fieldLayout = <div style={{display:\"flex\", flexDirection:\"column\", justifyContent:\"center\", alignItems:\"center\"}}>\n                    <div style={{paddingBottom: 10}}>{queryParam.name}</div>\n                    <Switch\n                        id = {iQuery+queryParam.key}\n                        checked={value}\n                        onChange={(e) => this.changeSettingValue(iQuery, queryParam.key, e.target.checked) }\n                        {...inputField.params}/>\n                </div>\n\n        } else if (inputField.type == \"dropdown\") {\n\n            fieldLayout = <div style={{display:\"flex\", justifyContent:\"center\", alignItems:\"center\"}}>\n                <div style={{paddingRight: 20}}>{queryParam.name + \":\"}</div>\n                <Select\n                        className=\"querySelect\"\n                        value={ Array.isArray(value) ? value.map(val => _.find(inputField.params.options, {value: val})) : _.find(inputField.params.options, {value: value})}\n                        onChange={(obj) => this.changeSettingValue(iQuery, queryParam.key, \n                            Array.isArray(obj) ? obj.map(obj => obj.value) : obj ? obj.value : null )}\n                        {...inputField.params}/>\n                </div>\n\n        } else if (inputField.type == \"color\") {\n\n            let pickerID = String(iQuery) + queryParam.key\n\n            let colorPicker = this.state.displayColorPicker && this.state.displayColorPicker[pickerID] ? (\n                <div style={{position: \"absolute\", bottom: 60}}>\n                    <ChromePicker\n                        color={value ? value : \"#00F0F8FF\"}\n                        onChangeComplete={(color) => this.changeSettingValue(iQuery, queryParam.key, color.hex)}\n                        {...inputField.params}/>\n                </div>\n            ) : null;\n\n            fieldLayout = <div style={{position: \"relative\",display:\"flex\", flexDirection:\"column\", justifyContent:\"center\", alignItems:\"center\"}}>\n                    <div style={{paddingBottom: 10}}>{queryParam.name}</div>\n                    <div \n                        className=\"z-depth-2\"\n                        onClick={() => this.toggleColorPicker(pickerID)}\n                        style={{width: 30, height: 30, borderRadius: 30, background: value}}/>\n                    \n                    {colorPicker}\n                </div>\n        } else if (inputField.type == \"rangeslider\"){\n\n            fieldLayout = <div style={{paddingLeft: \"10%\", paddingRight: \"10%\"}}>\n            <div style={{paddingBottom: 10}}>{queryParam.name}</div>\n            <Range\n                value={value}\n                onChange={(value) => this.changeSettingValue(iQuery, queryParam.key, value)}\n                {...inputField.params}/>\n          </div>\n\n        } else if (inputField.type == \"number\"){\n\n            fieldLayout = <div>\n                <div style={{paddingBottom: 10}}>{queryParam.name}</div>\n                <input\n                    type=\"number\"\n                    value={value}\n                    onChange={(e) => this.changeSettingValue( iQuery, queryParam.key, Number(e.target.value) )}\n                    {...inputField.params}/>\n                </div>\n        }\n\n        return <div style={{marginBottom: 5, marginTop: 5, paddingLeft: 10, paddingRight: 10, width: this.props.w(inputField.width), ...inputField.style}}>{fieldLayout}</div>\n    }\n\n    renderQuery = (query, iQuery) => {\n\n        return (\n\n            <div key={iQuery} style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n                <Switch\n                    id={iQuery+\"active\"}\n                    checked={query.active}\n                    onChange={(e) => this.changeSettingValue(iQuery, \"active\", e.target.checked) }/>\n                <Card className=\"queryCard\" style={{flex: 1, background: query.active ? \"#CBFFC0\" : \"#ffc3cd\", borderRadius: 10}}>\n                    <div style={{display:\"flex\", flexWrap: \"wrap\", justifyContent: \"space-around\"}}>\n                        {this.props.setting.inputField.queryForm.map(queryParam => this.renderInputField(queryParam, query[queryParam.key], iQuery))}\n                    </div>   \n                </Card>\n            </div>\n            \n        )\n\n    }\n\n    render() {\n\n        return (\n            <div>\n                {this.props.value.map( (query, iQuery) => this.renderQuery(query, iQuery))}\n                <Button\n                    data-tip=\"Add a new query\"\n                    onClick={this.addQuery}>\n                    Add Query\n                </Button>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\n//--Components\nimport { TextInput, Switch } from 'react-materialize'\nimport Select from \"react-select\"\nimport { ChromePicker } from \"react-color\"\nimport { Range } from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\nimport _ from \"lodash\"\n\n//--Redux\nimport { connect } from 'react-redux'\nimport { changeSettings } from \"../../redux/actions\"\nimport QueriesField from './QueriesField';\n\nclass InputField extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state ={}\n    }\n\n    w = (string) => {\n\n        if (!string) return undefined\n\n        let isSizeDefined = [\"s\", \"m\", \"l\"].map(sizeLabel => string.indexOf(sizeLabel) >= 0)\n\n        let iWindowSize = [\"small\", \"medium\", \"infinity\"].indexOf(this.props.browser.mediaType)\n\n        for (var i = iWindowSize; i > -1; i--) {\n            \n            if(isSizeDefined[i]){\n                let width = _.find(string.split(\" \"), (str) => str.indexOf([\"s\",\"m\",\"l\"][i]) >= 0)\n                return width.substr(1)\n            }\n          }\n\n        return undefined\n    }\n\n    changeSettingValue = (newValue) => {\n\n        this.props.changeSettings(this.props.onSettingChangeType, this.props.setting.key, newValue)\n        \n    }\n    \n    toggleColorPicker = () => {\n        this.setState({ displayColorPicker: !this.state.displayColorPicker })\n    };\n\n    render() {\n\n        let inputField = this.props.setting.inputField\n        let fieldLayout;\n\n        if (inputField.type == \"textinput\"){\n\n            fieldLayout = <TextInput\n                    noLayout\n                    value={this.props.value}\n                    onChange={(e) => this.changeSettingValue(e.target.value)}\n                    label={this.props.setting.name}\n                    {...inputField.params}/>\n\n        } else if (inputField.type == \"switch\"){\n\n            fieldLayout = <div style={{display:\"flex\", flexDirection:\"column\", justifyContent:\"center\", alignItems:\"center\"}}>\n                    <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n                    <Switch\n                        id = {this.props.setting.key}\n                        checked={this.props.value}\n                        onChange={(e) => this.changeSettingValue(e.target.checked) }\n                        {...inputField.params}/>\n                </div>\n\n        } else if (inputField.type == \"dropdown\") {\n\n            fieldLayout = <div style={{display:\"flex\", justifyContent:\"center\", alignItems:\"center\"}}>\n                <div style={{paddingRight: 20}}>{this.props.setting.name + \":\"}</div>\n                <Select\n                        value={ Array.isArray(this.props.value) ? this.props.value.map(val => _.find(inputField.params.options, {value: val})) : _.find(inputField.params.options, {value: this.props.value})}\n                        onChange={(obj) => this.changeSettingValue(Array.isArray(obj) ? obj.map(obj => obj.value) : obj ? obj.value : null )}\n                        {...inputField.params}/>\n                </div>\n\n        } else if (inputField.type == \"color\") {\n\n            let colorPicker = this.state.displayColorPicker ? (\n                <div style={{position: \"absolute\", bottom: 60}}>\n                    <ChromePicker\n                        color={this.props.value}\n                        onChangeComplete={(color) => this.changeSettingValue(color.hex)}\n                        {...inputField.params}/>\n                </div>\n            ) : null;\n\n            fieldLayout = <div style={{position: \"relative\",display:\"flex\", flexDirection:\"column\", justifyContent:\"center\", alignItems:\"center\"}}>\n                    <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n                    <div \n                        className=\"z-depth-2\"\n                        onClick={this.toggleColorPicker}\n                        style={{width: 30, height: 30, borderRadius: 30, background: this.props.value}}/>\n                    \n                    {colorPicker}\n                </div>\n        } else if (inputField.type == \"rangeslider\"){\n\n            fieldLayout = <div style={{paddingLeft: \"10%\", paddingRight: \"10%\"}}>\n            <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n            <Range\n                value={this.props.value}\n                onChange={(value) => this.changeSettingValue(value)}\n                {...inputField.params}/>\n          </div>\n\n        } else if (inputField.type == \"number\"){\n\n            fieldLayout = <div>\n                <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n                <input\n                    type=\"number\"\n                    value={this.props.value}\n                    onChange={(e) => this.changeSettingValue( Number(e.target.value) )}\n                    {...inputField.params}/>\n                </div>\n        } else if (inputField.type == \"queries\"){\n\n            fieldLayout = <div>\n                <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n                <QueriesField \n                    changeSettingValue={this.changeSettingValue}\n                    setting={this.props.setting}\n                    value={this.props.value}\n                    w={this.w}/>\n            </div>\n        }\n\n        let tooltipParams = {\n            \"data-tip\": (this.props.setting.help ? this.props.setting.help + \"<br>\" : \"\") + \"Default: \" + (this.props.setting.default || \"None\"),\n            \"data-multiline\": true,\n            \"data-effect\": \"solid\",\n            \"data-place\": inputField.type == \"color\" ? \"bottom\" : \"top\", \n        }\n\n        return <div style={{marginTop: 20, marginBottom: 20, width: this.w(inputField.width), ...inputField.style}} {...tooltipParams}>{fieldLayout}</div>\n\n    }\n}\n\nconst mapStateToProps = state => ({\n    browser: state.browser\n})\n\nconst mapDispatchToProps = dispatch => ({\n    changeSettings: (actionType, settingKey, newValue) => dispatch(changeSettings(actionType, settingKey, newValue)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputField);\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { Row, Collapsible, CollapsibleItem, Icon, Col, Button} from 'react-materialize'\nimport InputField from \"./InputField\"\n\nimport parse from 'html-react-parser';\nimport _ from \"lodash\"\n\nexport default class SettingsContainer extends Component {\n\n    renderSettingsGroup = (settingsGroup) => {\n\n        return settingsGroup.map(setting => {\n\n            if (!setting.inputField) return null\n        \n            return <InputField \n                        key={setting.key}\n                        setting={setting} \n                        value={this.props.settings[setting.key]}\n                        onSettingChangeType={this.props.onSettingChangeType}/>\n        }) \n    }\n\n    renderSettingsGroups = (groupedParams) => {\n\n        return this.props.paramGroups.map(paramGroup => {\n\n            let groupKey = paramGroup.key ? paramGroup.key : \"null\";\n\n            let settingsGroup = groupedParams[groupKey]\n\n            if (!settingsGroup) return null\n\n            let subGrouped = _.groupBy(settingsGroup, \"subGroup\")\n\n            let subGroups = paramGroup.subGroups ? [{key: \"null\", name: null},  ...paramGroup.subGroups] : [{key: \"null\", name: null}]\n\n            let itemContent = subGroups.map(({key, name}) => {\n\n                if ( ! subGrouped[key] ) return null\n                \n                return <div key={key}>\n                    <div style={{paddingBottom: 20, fontWeight:\"bold\", fontSize: \"1.3em\", textAlign: \"left\"}}>{name}</div>\n                    <div style={{display: \"flex\", flexWrap: \"wrap\", justifyContent: \"space-around\", alignItems: \"center\"}}>{this.renderSettingsGroup(subGrouped[key])}</div>\n                </div>\n            })\n\n            \n\n            return (\n                <CollapsibleItem\n                    key={groupKey}\n                    header={paramGroup.name} \n                    icon={<Icon>{paramGroup.icon}</Icon>}>\n                    <blockquote style={{textAlign: \"left\"}}>\n                        {parse(paramGroup.description)}\n                    </blockquote>\n                    {itemContent}\n                    <div style={{display: \"flex\", flexWrap: \"wrap\", justifyContent: \"space-around\"}}>\n                        <Button\n                            onClick={this.props.undoSettings}\n                            data-tip=\"This will roll back to previous settings.<br> IT AFFECTS ALL GROUPS OF PARAMETERS, not only this one.\"\n                            className=\"orange\"\n                            style={{margin:20}}>\n                                <Icon left>arrow_back_ios</Icon>Previous settings\n                        </Button>\n\n                        <Button\n                            data-tip=\"This will restore all settings to the plot's defaults\"\n                            className=\"red\" style={{margin:20}}><Icon left>refresh</Icon>Restore defaults</Button>\n\n                        <Button\n                            data-tip=\"This will change the settings and will update everything accordingly.<br> IT ONLY AFFECTS THIS GROUP OF SETTINGS, not all settings\"\n                            onClick={() => this.props.submitSettings( settingsGroup.reduce((settings, setting) => {\n                                settings[setting.key] = this.props.settings[setting.key]\n                                return settings\n                            }, {}))}\n                            className=\"blue\" \n                            style={{margin:20}}>\n                                Submit settings<Icon right>arrow_forward_ios</Icon>\n                        </Button>\n                        \n                    </div>\n                </CollapsibleItem> \n            )\n\n        })\n    }\n\n    render() {\n\n        let groupedParams = _.groupBy(this.props.params, \"group\")\n\n        return (\n            <Collapsible popout>\n                {this.renderSettingsGroups(groupedParams)}          \n            </Collapsible>\n        )\n    }\n}\n\n","import React, { Component } from 'react'\nimport PythonApi from \"../apis/PythonApi\"\n\n//--Components\nimport ReactTooltip from \"react-tooltip\"\nimport SettingsContainer from \"../components/settings/SettingsContainer\"\n\n//--Redux\nimport { connect } from 'react-redux'\nimport { setCurrentSession } from \"../redux/actions\"\n\nimport _ from \"lodash\"\nimport { CHANGE_SESSION_SETTINGS } from '../redux/actions/actionTypes'\n\nclass Settings extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {}\n    }\n\n    submitSettings = (settings) => {\n\n        PythonApi.updateSessionSettings(this.props.session.id, settings, (session) => {\n            this.props.setCurrentSession(session)\n            alert(\"Session settings have been updated\")   \n        })\n    }\n\n    undoSettings = () => {\n\n        PythonApi.undoSessionSettings(this.props.session.id, (session) => {\n            this.props.setCurrentSession(session)\n            alert(\"Session settings have been rolled back\")  \n            \n        })\n    }\n\n    componentDidMount(){\n        PythonApi.getSessionSettings( session => this.props.setCurrentSession(session))\n    }\n\n    render() {\n\n        if ( _.isEmpty(this.props.session) ) return null\n\n        return (\n            <div style={{padding: 20}}>\n                <SettingsContainer\n                    settings={this.props.session.settings}\n                    params={this.props.session.params}\n                    paramGroups={this.props.session.paramGroups}\n                    onSettingChangeType={CHANGE_SESSION_SETTINGS}\n                    submitSettings={this.submitSettings}\n                    undoSettings={this.undoSettings}/>\n                <ReactTooltip multiline disable={this.props.session.settings ? !this.props.session.settings.showTooltips : false}/>\n            </div>\n            \n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    session: state.session\n})\n\nconst mapDispatchToProps = dispatch => ({\n    setCurrentSession: (session) => dispatch(setCurrentSession(session)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n","import React, { Component } from 'react'\nimport { Row, Col} from 'react-materialize'\nimport ReactTooltip from \"react-tooltip\"\n\nimport PythonApi from \"../apis/PythonApi\"\n\n//--Components\nimport PlotCard from '../components/PlotCard'\nimport SettingsContainer from '../components/settings/SettingsContainer'\n\n//--Redux\nimport { connect } from 'react-redux'\nimport { addPlots, setNewStructures, setActivePlot, setCurrentSession, informLoadedPlot, informLoadingPlot } from \"../redux/actions\"\nimport { CHANGE_PLOT_SETTINGS } from '../redux/actions/actionTypes'\n\n\n\nclass PlotTweaking extends Component {\n\n    componentDidMount(){\n\n        PythonApi.getSessionSettings(session => this.props.setCurrentSession(session))\n    }\n\n    submitSettings = (settings) => {\n\n        this.props.informLoadingPlot({id: this.props.active.plot.id, ...this.props.active.plot, struct: {name: this.props.active.plot.struct}})\n\n        PythonApi.updatePlotSettings(this.props.active.plot.id, settings, (plot) => {\n            this.props.addPlots( {[plot.id]: plot})\n\n            if (this.props.active.plot.id == plot.id){\n                this.props.setActivePlot(plot)\n            }\n\n            this.props.informLoadedPlot(plot.id)\n            document.dispatchEvent(new Event(\"newPlot\"))\n            \n        })\n    }\n\n    undoSettings = () => {\n\n        PythonApi.undoPlotSettings(this.props.active.plot.id, (plot) => {\n            this.props.addPlots( {[plot.id]: plot})\n\n            if (this.props.active.plot.id == plot.id){\n                this.props.setActivePlot(plot)\n            }\n            \n        })\n    }\n\n    render() {\n\n        if (! this.props.active.plot ) return null\n\n        let setsCont = <SettingsContainer\n                            settings={this.props.active.plot.settings}\n                            params={this.props.active.plot.params}\n                            paramGroups={this.props.active.plot.paramGroups}\n                            onSettingChangeType={CHANGE_PLOT_SETTINGS}\n                            submitSettings={this.submitSettings}\n                            undoSettings={this.undoSettings}/>\n        \n        return (\n            <div>\n                <Row>\n                    <Col className=\"s12 l4\">\n                        <PlotCard plot={this.props.active.plot} plotStyle={{height:\"75vh\"}}/>\n                    </Col>\n                    <Col className=\"s12 l8\" >\n                        {this.props.browser.mediaType == \"infinity\" ? <div className=\"scrollView\" style={{ maxHeight: \"90vh\" }}>{setsCont}</div> : setsCont}\n                    </Col>\n                </Row>\n                <ReactTooltip multiline disable={this.props.session.settings ? !this.props.session.settings.showTooltips : false}/>  \n            </div>\n            \n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    plots: state.plots,\n    structures: state.structures,\n    active: state.active,\n    session: state.session,\n    browser: state.browser\n})\n\nconst mapDispatchToProps = {\n    setCurrentSession,\n    addPlots,\n    setActivePlot,\n    setNewStructures,\n    informLoadedPlot,\n    informLoadingPlot\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlotTweaking);\n","import React from \"react\";\nimport { Switch } from \"react-router-dom\";\nimport Route from \"./Route\";\n\nimport Plots from \"../pages/Plots\";\nimport Settings from \"../pages/Settings\";\nimport PlotTweaking from \"../pages/PlotTweaking\";\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route path=\"/plots\" exact component={Plots} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route path=\"/plotTweaking\" component={PlotTweaking}/>\n\n      {/* redirect user to SignIn page if route does not exist and user is not authenticated */}\n      <Route component={Plots} />\n    </Switch>\n  );\n}\n","import { createStore } from 'redux'\nimport {responsiveStoreEnhancer} from 'redux-responsive'\nimport { persistStore} from 'redux-persist'\n\nimport rootReducer from '../reducers'\n\nexport default () => {\n  let store = createStore(rootReducer, responsiveStoreEnhancer)\n  let persistor = persistStore(store)\n  //persistor.purge()\n  return { store, persistor }\n}","import React, { Component } from 'react'\n\nimport moment from \"moment\"\nimport { informLoadedPlot } from '../../redux/actions';\n\nimport {connect} from \"react-redux\"\n\nclass LoadingChip extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            time: Date.now()\n        }\n    }\n\n    componentDidMount(){\n        this.interval = setInterval(() => this.setState({ time: Date.now() }), 1000);\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.interval);\n    }\n\n    getLoadingTime = (loadingInit) => {\n\n        return moment(moment().diff(loadingInit)).format(\"mm:ss\")\n    }\n\n    render() {\n\n        let processName = this.props.info.name || this.props.info.struct.name ? [this.props.info.struct.name.replace(\".fdf\", \"\"), this.props.info.plotClass].join(\" \") : \"No name\"\n        let elapsed = this.getLoadingTime(this.props.info.from)\n\n        return (\n            <div className=\"loadingChip\">\n                <span style={{paddingRight: 10}}>{processName}</span>\n                <span>{elapsed}</span>\n                <span className=\"removeTabBut\" onClick={() => this.props.informLoadedPlot(this.props.info.id)}>X</span>\n            </div>\n        )\n    }\n}\n\n\nconst mapDispatchToProps = {\n    informLoadedPlot\n}\n\nexport default connect(null, mapDispatchToProps)(LoadingChip);\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport LoadingChip from './LoadingChip'\n\nexport class LoadingTracker extends Component {\n    \n    render() {\n\n        return (\n            <div className=\"loadingTracker\">\n                {Object.values(this.props.loading.plots).map(loadingInfo => <LoadingChip info={loadingInfo}/>)}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    loading: state.loading\n})\n\nexport default connect(mapStateToProps, null)(LoadingTracker);\n","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\"\n\n//--Navigation\nimport { Router } from 'react-router-dom';\nimport history from './apis/history';\nimport Routes from './routes';\n\n//--Redux\nimport getStoreAndPersistor from './redux/store'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\nimport LoadingTracker from './components/loading/LoadingTracker';\n\nconst {store, persistor} = getStoreAndPersistor()\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <div className=\"App\" style={{display: \"flex\", flexDirection: \"column\"}}>\n          <Navbar />\n          <div className = \"appContent\" style={{flex: 1}}>\n            <Router history={history}>\n              <LoadingTracker />\n              <Routes />\n            </Router>\n          </div>   \n        </div>\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}