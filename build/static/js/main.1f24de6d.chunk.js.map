{"version":3,"sources":["redux/actions/index.js","redux/actions/actionTypes.js","components/Navbar.js","apis/history.js","routes/Route.js","apis/PythonApi.js","components/PlotCard.js","components/PlotDashboard.js","pages/Plots.js","components/settings/QueriesField.js","components/settings/InputField.js","components/settings/SettingsContainer.js","pages/Settings.js","pages/PlotTweaking.js","routes/index.js","redux/reducers/session.js","redux/reducers/plots.js","redux/reducers/structures.js","redux/reducers/tabs.js","redux/reducers/active.js","redux/reducers/index.js","redux/store/index.js","App.js","serviceWorker.js","index.js"],"names":["setCurrentSession","session","type","addPlots","newPlots","tabsIDs","setNewStructures","newStructures","setSessionTabs","tabs","setActivePlot","plot","activePlot","AppNavbar","brand","alignLinks","className","href","Component","connect","dispatch","clearSession","history","createBrowserHistory","RouteWrapper","component","isPrivate","rest","to","defaultProps","tabAdress","tabID","tabsAdress","plotAdress","plotID","plotsAdress","_requestToApi","adress","request","responseHandler","fetch","apiAdress","headers","then","response","json","statusCode","alert","error","figure","JSON","parse","catch","console","log","_get","method","_post","_put","_delete","_updateSettings","newSettings","callback","body","stringify","settings","action","_undoSettings","_save","params","_load","getSessionSettings","sessionAdress","updateSessionSettings","sessionID","undoSessionSettings","saveSession","loadSession","getAvailableStructs","structsAdress","structures","getSessionTabs","addNewTab","newtabAdress","removeTab","updateTabParams","newTabParams","getPlotOptions","plotTypesAdress","plotOptions","getPlot","getNewPlot","updatePlotSettings","undoPlotSettings","removePlot","showPlotFullScreen","this","PlotCard","props","PythonApi","id","active","tab","reqParams","setPlotAsActive","state","isLoading","style","borderRadius","textAlign","color","layout","backColor","paper_bgcolor","layoutSettings","_","groupBy","reduce","map","param","key","nestedLayoutParams","unflatten","delimiter","xaxis","yaxis","DragHandle","sortableHandle","cursor","dragHandle","sortable","data-tip","justifyContent","alignItems","paddingTop","background","overflow","display","flexDirection","flex","padding","useResizeHandler","width","height","plotStyle","data","frames","onClick","onUpdate","warn","multiline","disable","showTooltips","SortableItem","SortableElement","s","m","l","SortableList","SortableContainer","plots","index","PlotDashboard","onSortEnd","oldIndex","newIndex","setTabPlots","arrayMove","find","axis","useDragHandle","transitionDuration","Plots","syncWithSession","updateTabs","setState","setActiveTab","length","undefined","newTab","last","iDeletedTab","findIndex","Math","min","updateTabName","e","target","blur","name","textContent","plotToInitialize","togglePlotInitializer","saveCurrentSession","path","prompt","rootDir","displayPlotInitializer","window","scrollTo","top","behavior","updateInitializingOptions","value","renderPlotInitializer","loadingMessage","marginLeft","marginRight","actions","right","Object","keys","structID","selected","struct","options","placeholder","isClearable","isSearchable","onChange","obj","label","defaultValue","checked","animation","renderNewPlotButton","isInitializerDisplaying","addNewPlotBut","floating","icon","fab","direction","hoverEnabled","large","loadingPlots","activeTab","forEach","indexOf","filter","tabName","contentEditable","onBlur","onKeyUp","keyCode","flexWrap","paddingLeft","paddingRight","addTabs","newTabs","QueriesField","toggleColorPicker","pickerID","displayColorPicker","addQuery","newQuery","setting","inputField","queryForm","queryParam","default","changeSettingValue","iQuery","paramKey","paramValue","newValue","cloneDeep","renderInputField","fieldLayout","noLayout","paddingBottom","Array","isArray","val","String","colorPicker","position","bottom","onChangeComplete","hex","Number","marginBottom","marginTop","w","renderQuery","query","InputField","string","isSizeDefined","sizeLabel","i","browser","mediaType","split","str","substr","changeSettings","onSettingChangeType","tooltipParams","help","actionType","settingKey","SettingsContainer","renderSettingsGroup","settingsGroup","renderSettingsGroups","groupedParams","paramGroups","paramGroup","groupKey","subGrouped","itemContent","subGroups","fontWeight","fontSize","header","description","undoSettings","margin","left","submitSettings","popout","Settings","isEmpty","PlotTweaking","setsCont","maxHeight","Routes","exact","defaultState","newState","omit","combineReducers","createResponsiveStateReducer","small","medium","persistConfig","storage","whitelist","persistedReducer","persistReducer","rootReducer","store","createStore","responsiveStoreEnhancer","persistor","persistStore","getStoreAndPersistor","App","Navbar","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f24de6d.chunk.js","sourcesContent":["import { \n    ADD_PLOTS,\n    REMOVE_PLOT,\n    ADD_TABS,\n    SET_STRUCTURES,\n    SET_TAB_PLOTS,\n    SET_SESSION_TABS,\n    SET_ACTIVE_PLOT,\n    SET_ACTIVE_TAB,\n    CLEAR_SESSION,\n    SET_SESSION,\n    CHANGE_PLOT_SETTINGS\n} from './actionTypes'\n\nexport const setCurrentSession = (session) => ({\n    type: SET_SESSION,\n    session\n})\n\nexport const addPlots = (newPlots, tabsIDs) => ({\n    type: ADD_PLOTS,\n    newPlots,\n    tabsIDs\n})\n\nexport const removePlot = (plotID, tabID) => ({\n    type: REMOVE_PLOT,\n    plotID,\n    tabID\n})\n\nexport const changeSettings = (actionType, settingKey, value) => ({\n    type: actionType, //Valid action types are all of type CHANGE_<something>_SETTINGS\n    settingKey,\n    value\n})\n\nexport const addTabs = (newTabs) => ({\n    type: ADD_TABS,\n    newTabs\n})\n\nexport const setNewStructures = (newStructures) => ({\n    type: SET_STRUCTURES,\n    newStructures\n})\n\nexport const setTabPlots = (tabID, plots) => ({\n    type: SET_TAB_PLOTS,\n    tabID,\n    plots\n})\n\nexport const setSessionTabs = (tabs) => ({\n    type: SET_SESSION_TABS,\n    tabs\n})\n\nexport const setActivePlot = (plot) => ({\n    type: SET_ACTIVE_PLOT,\n    activePlot: plot\n})\n\nexport const setActiveTab = (tab) => ({\n    type: SET_ACTIVE_TAB,\n    activeTab: tab\n})\n\nexport const clearSession = () => ({\n    type: CLEAR_SESSION,\n})\n\n\n\n\n","export const ADD_PLOTS = 'ADD_PLOTS'\nexport const REMOVE_PLOT = 'REMOVE_PLOT'\nexport const CHANGE_PLOT_SETTINGS = 'CHANGE_PLOT_SETTINGS'\nexport const ADD_TABS = 'ADD_TABS'\nexport const SET_STRUCTURES = 'SET_STRUCTURES'\nexport const SET_TAB_PLOTS = 'SET_TAB_PLOTS'\nexport const SET_SESSION_TABS = 'SET_SESSION_TABS'\nexport const SET_ACTIVE_PLOT = 'SET_ACTIVE_PLOT'\nexport const SET_ACTIVE_TAB = 'SET_ACTIVE_TAB'\nexport const SET_SESSION = 'SET_SESSION'\nexport const CHANGE_SESSION_SETTINGS = 'CHANGE_SESSION_SETTINGS'\nexport const CLEAR_SESSION = 'CLEAR_SESSION'\n","import React, { Component } from 'react'\nimport {Navbar, NavItem, Icon} from 'react-materialize';\n\n//--Redux\nimport { connect } from 'react-redux'\nimport {clearSession} from \"../redux/actions\"\n\nclass AppNavbar extends Component {\n    render() {\n        return (\n            <Navbar brand={<a />} alignLinks=\"right\" className=\"transparent z-depth-0\">\n                <NavItem className=\"blackText\" href=\"/plots\">\n                    Plots\n                </NavItem>\n                <NavItem href=\"/settings\">\n                    <Icon>settings</Icon>\n                </NavItem>\n                <NavItem href=\"/settings\">\n                    <Icon>help</Icon>\n                </NavItem>\n            </Navbar>\n            \n        )\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    clearSession: () => dispatch(clearSession()),\n})\n\nexport default connect(null, mapDispatchToProps)(AppNavbar);\n","import { createBrowserHistory } from \"history\";\n\nconst history = createBrowserHistory();\n\nexport default history;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nexport default function RouteWrapper({\n  component: Component,\n  isPrivate,\n  ...rest\n}) {\n  const signed = false;\n\n  /**\n   * Redirect user to SignIn page if he tries to access a private route\n   * without authentication.\n   */\n  if (isPrivate && !signed) {\n    return <Redirect to=\"/\" />;\n  }\n\n  /**\n   * Redirect user to Main page if he tries to access a non private route\n   * (SignIn or SignUp) after being authenticated.\n   */\n  if (!isPrivate && signed) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  /**\n   * If not included on both previous cases, redirect user to the desired route.\n   */\n  return <Route {...rest} component={Component} />;\n}\n\nRouteWrapper.propTypes = {\n  isPrivate: PropTypes.bool,\n  component: PropTypes.oneOfType([PropTypes.element, PropTypes.func]).isRequired\n};\n\nRouteWrapper.defaultProps = {\n  isPrivate: false\n};\n","\n//This class will contain all the fetches to the python API\nclass PythonApi {\n\n    constructor(){\n\n        this.apiAdress = 'http://localhost:4000'\n    }\n\n    //ADDRESSES\n    get sessionAdress(){\n        return \"/sislGUI/session\"\n    }\n\n    get tabsAdress(){\n        return \"/sislGUI/tab\"\n    }\n\n    get newtabAdress(){\n        return this.tabsAdress + \"/new\"\n    }\n\n    tabAdress = (tabID) => {\n        return this.tabsAdress + \"/\" + tabID\n    }\n\n    get plotsAdress(){\n        return \"/sislGUI/plot\"\n    }\n\n    plotAdress = (plotID) => {\n        return this.plotsAdress + \"/\" + plotID\n    }\n\n    get plotTypesAdress(){\n        return \"/sislGUI/plotTypes\"\n    }\n\n    get structsAdress(){\n        return \"/sislGUI/structs\"\n    }\n\n    //MOST LOW LEVEL METHODS (Should not be used directly)\n    _requestToApi = (adress, request, responseHandler ) => {\n\n        fetch(this.apiAdress + adress, \n      {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        ...request\n    })\n      .then(response => response.json())\n      .then(response => {\n        if (response.statusCode >= 400){\n            alert(response.error)\n        } else {\n\n            //The plot figure comes double JSON encoded (Plotly encoding + flask encoding)\n            if (response.plot){\n\n                response = {\n                    ...response,\n                    plot: {\n                        ...response.plot,\n                        figure: JSON.parse(response.plot.figure)\n                    }\n                }\n            }\n\n            responseHandler(response)\n        }\n      })\n      .catch((error) => {\n          console.log(error)\n          //alert(\"Can not connect to the API, are you sure it is running? If so, check your API adress in settings.\")\n      })\n    }\n\n    _get = (adress, {request, responseHandler}) => {\n        this._requestToApi(adress, {...request, method: 'GET'}, responseHandler)\n    }\n\n    _post = (adress, {request, responseHandler}) => {\n        this._requestToApi(adress, {...request, method: 'POST'}, responseHandler)\n    }\n\n    _put = (adress, {request, responseHandler}) => {\n        this._requestToApi(adress, {...request, method: 'PUT'}, responseHandler)\n    }\n\n    _delete = (adress, {request, responseHandler}) => {\n        this._requestToApi(adress, {...request, method: 'DELETE'}, responseHandler)\n    }\n\n    //A BIT HIGHER LEVEL METHODS (to be used by high level methods below)\n    _updateSettings = (adress, newSettings, callback = () => {}) => {\n        this._post(adress, {request: {body: JSON.stringify({settings: newSettings, action: \"updateSettings\"})}, responseHandler: callback})\n    }\n\n    _undoSettings = (adress, callback = () => {}) => {\n        this._post(adress, {request: {body: JSON.stringify({action: \"undoSettings\"})}, responseHandler: callback})\n    }\n\n    _save = (adress, params, callback = () => {}) => {\n        this._post(adress, {request: {body: JSON.stringify({action: \"save\", ...params})}, responseHandler: callback})\n    }\n\n    _load = (adress, params, callback = () => {}) => {\n        this._post(adress, {request: {body: JSON.stringify({action: \"load\", ...params})}, responseHandler: callback})\n    }\n\n\n    //HIGH LEVEL METHODS (should be used by components)\n\n    getSessionSettings = (callback = () => {}) => {\n        this._get(this.sessionAdress, {responseHandler: (response) => callback(response.session)} )\n    }\n\n    updateSessionSettings = ( sessionID, newSettings, callback = () => {}) => {\n        this._updateSettings(this.sessionAdress, newSettings, (response) => callback(response.session))\n    }\n\n    undoSessionSettings = ( sessionID, callback = () => {}) => {\n\n        this._undoSettings(this.sessionAdress, (response) => callback(response.session))\n    }\n\n    saveSession = (params, callback = () => {}) => {\n        this._save(this.sessionAdress, params, (response) => callback(response.session, params))\n    }\n\n    loadSession = (params, callback = () => {}) => {\n        this._load(this.sessionAdress, params, (response) => callback(response.session, params))\n    }\n\n    getAvailableStructs = (callback = () => {}) => {\n\n        this._get(this.structsAdress, {responseHandler: (response) => callback(response.structures)} )\n        \n    }\n\n    getSessionTabs = (callback = () => {}) => {\n\n        this._get(this.tabsAdress, {responseHandler: (response) => callback(response.tabs)} )\n        \n    }\n\n    addNewTab = (callback = () => {}) => {\n\n        this._get(this.newtabAdress, {responseHandler: (response) => callback(response.tabs)} )\n        \n    }\n\n    removeTab = (tabID, callback = () => {}) => {\n\n        this._delete(this.tabAdress(tabID), {responseHandler: (response) => callback(response.tabs)} )\n        \n    }\n\n    updateTabParams = (tabID, newTabParams, callback = () => {}) => {\n\n        this._put(this.tabAdress(tabID), {request: {body: JSON.stringify(newTabParams)}, responseHandler: (response) => callback(response.tabs)} )\n        \n    }\n\n    getPlotOptions = (callback = () => {}) => {\n        this._get(this.plotTypesAdress, {responseHandler: (response) => callback(response.plotOptions)} )\n    }\n\n    getPlot = (plotID, callback = () => {}) => {\n\n        this._get(this.plotAdress(plotID), {responseHandler: (response) => callback(response.plot)})\n    }\n\n    getNewPlot = (params, callback = () => {}) => {\n\n        this._post(this.plotsAdress, {request: {body: JSON.stringify(params)}, responseHandler: (response) => callback(response.plot, params)})\n    }\n\n    updatePlotSettings = ( plotID, newSettings, callback = () => {}) => {\n\n        this._updateSettings(this.plotAdress(plotID), newSettings, (response) => callback(response.plot))\n    }\n\n    undoPlotSettings = ( plotID, callback = () => {}) => {\n\n        this._undoSettings(this.plotAdress(plotID), (response) => callback(response.plot))\n    }\n\n    removePlot = (params, callback = () => {}) => {\n\n        this._delete(this.plotAdress(params.plotID), { responseHandler: (response) => callback(response.session,params)})\n    }\n\n    showPlotFullScreen = ( plotID, callback = () => {}) => {\n        this._post(this.plotAdress(plotID), {request: {body: JSON.stringify({action: \"fullScreen\"})}, responseHandler: (response) => callback(response.plot)})\n    }\n\n}\n\nexport default new PythonApi();","import React, { Component } from 'react'\nimport Plot from 'react-plotly.js';\nimport { Card, Row, Icon } from 'react-materialize';\n\nimport { CircleLoader} from 'react-spinners';\nimport ReactTooltip from \"react-tooltip\"\nimport {\n    sortableHandle,\n} from \"react-sortable-hoc\";\n\nimport _ from \"lodash\"\nimport {unflatten} from \"flat\"\n\n//--Redux\nimport { connect } from 'react-redux'\nimport { setActivePlot, removePlot, setSessionTabs} from \"../redux/actions\"\nimport PythonApi from '../apis/PythonApi';\n\nclass PlotCard extends Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            isLoading: false,\n        }\n    }\n\n    removePlot = () => {\n        PythonApi.removePlot({ plotID: this.props.plot.id, tabID: this.props.active.tab}, (session, reqParams) => {\n            this.props.setSessionTabs(session.tabs)\n            this.props.removePlot(reqParams.plotID)\n        })\n        \n    }\n\n    setPlotAsActive = () => {\n        this.props.setActivePlot(this.props.plot)\n    }\n\n    showPlotFullScreen = () => {\n        PythonApi.showPlotFullScreen(this.props.plot.id)\n    }\n\n    render() {\n\n        if (this.state.isLoading || !this.props.plot) {\n            return (\n                <Card \n                    className=\"plotcard\"\n                    style={{borderRadius: 15}}>\n                    <Row style={{textAlign: \"center\"}}>\n                        <CircleLoader color=\"#36D7B7\"/>\n                    </Row>\n                    <div>We are working hard to load your plot.</div>\n                </Card>\n            )\n        }\n\n        let layout = this.props.plot.figure.layout;\n        let backColor = this.props.plot.settings.paper_bgcolor || \"white\"\n\n        //If this is the active plot, we are going to overwrite the layout with the settings (so that user is able to see a preview)\n        if (this.props.active.plot && this.props.active.plot.id == this.props.plot.id){\n\n            backColor = this.props.active.plot.settings.paper_bgcolor || \"white\"\n\n            // let layoutSubGroups = _.groupBy( _.groupBy(this.props.active.plot.params, \"group\")[\"layout\"] , \"subGroup\")\n\n            // layout = {\n            //     ...layout,\n            //     ...layoutSubGroups[\"undefined\"].reduce((map, param) => {map[param.key] = this.props.active.plot.settings[param.key]; return map}, {} ),\n            //     \"xaxis\": {\n            //         ...layout.xaxis,\n            //         ...layoutSubGroups[\"xaxis\"].reduce((map, param) => {map[param.key.split(\"_\").pop()] = this.props.active.plot.settings[param.key]; return map}, {}),\n            //     },\n            //     \"yaxis\": {\n            //         ...layout.yaxis,\n            //         ...layoutSubGroups[\"yaxis\"].reduce((map, param) => {map[param.key.split(\"_\").pop()] = this.props.active.plot.settings[param.key]; return map}, {} ),\n            //     }\n\n            // }\n\n            let layoutParams = _.groupBy(this.props.active.plot.params, \"group\")[\"layout\"]\n\n            let layoutSettings = layoutParams.reduce((map,param) => {map[param.key] = this.props.active.plot.settings[param.key]; return map},{})\n\n            let nestedLayoutParams = unflatten( layoutSettings, {delimiter: \"_\"})\n\n\n            layout = {\n                ...layout,\n                ...layoutSettings,\n                \"xaxis\": {\n                    ...layout.xaxis,\n                    ...nestedLayoutParams.xaxis\n                },\n                \"yaxis\": {\n                    ...layout.yaxis,\n                    ...nestedLayoutParams.yaxis\n                }\n\n            }\n            \n        }\n        \n        const DragHandle = sortableHandle(() => <div style={{cursor: \"pointer\"}}><Icon className=\"small grey-text\" >drag_handle</Icon></div>);\n\n        const dragHandle = this.props.sortable ? (\n            <div\n                data-tip=\"Drag the plot to change its position\"\n                style={{justifyContent: \"center\", alignItems: \"center\", textAlign: \"center\", paddingTop: \"20px\", background: backColor}}>\n                <DragHandle/>\n            </div>) : null;\n\n        return (\n            \n            <Card\n                className=\"plotcard\"\n                style={{borderRadius: 15, overflow: \"hidden\"}}>\n                <div style={{display: \"flex\", flexDirection: \"column\", ...this.props.style}}>\n                    {dragHandle}\n                    <div style={{flex:1, padding: \"10px 10px 0 10px\", background: backColor}}>\n                        <Plot\n                            useResizeHandler\n                            style={{ width: \"auto\", height: \"100%\", ...this.props.plotStyle}}\n                            data={this.props.plot.figure.data}\n                            layout={layout}\n                            frames={this.props.plot.figure.frames}\n                            onClick={(data) => console.log(data)}\n                            onUpdate={(figure) => console.warn(figure)}\n                        />\n                    </div>\n                    <div style={{display: \"flex\"}} className=\"card-action\">\n                        <div style={{flex:1, textAlign: \"left\"}}>\n                            <a data-tip=\"Full screen\" href=\"#\" onClick={this.showPlotFullScreen}><Icon>fullscreen</Icon></a> \n                        </div>\n\n                        <div>\n                            <a\n                                data-tip=\"Edit\"\n                                href=\"/plotTweaking\"\n                                onClick={this.setPlotAsActive}><Icon>edit</Icon></a>\n                            <a data-tip=\"Export data\" href=\"#\"><Icon>file_download</Icon></a>\n                            <a data-tip=\"Remove\" href=\"#\" className=\"red-text\" onClick={this.removePlot}><Icon className=\"removePlot\">delete</Icon></a>\n                        </div>\n                        \n                    </div>  \n                </div>\n                <ReactTooltip multiline disable={this.props.session.settings ? !this.props.session.settings.showTooltips : false}/>\n            </Card>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    active: state.active,\n    session: state.session\n})\n\nconst mapDispatchToProps = dispatch => ({\n    setSessionTabs: (tabs) => dispatch(setSessionTabs(tabs)),\n    setActivePlot: (plot) => dispatch(setActivePlot(plot)),\n    removePlot: (plotID, tabID) => dispatch(removePlot(plotID, tabID)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlotCard);\n","import React, { Component } from \"react\";\n\nimport _ from \"lodash\"\n\n//--Components\nimport {\n  SortableContainer,\n  SortableElement,\n  arrayMove\n} from \"react-sortable-hoc\";\nimport PlotCard from \"./PlotCard\";\nimport { Col, Row} from \"react-materialize\";\n\n//--Redux\nimport { connect } from 'react-redux'\nimport {addPlot, setTabPlots} from \"../redux/actions\"\n\nconst SortableItem = SortableElement(({ plot }) => (\n  <Col s={12} m={6} l={4}>\n    <PlotCard plot={plot} sortable plotStyle={{height: \"65vh\"}}/>\n  </Col>\n));\n\nconst SortableList = SortableContainer(({ plots }) => {\n  return (\n    <Row>\n      {plots.map((plot, index) => (\n        <SortableItem key={index} index={index} plot={plot} />\n      ))}\n    </Row>\n  );\n});\n\nclass PlotDashboard extends Component {\n\n  onSortEnd = ({ oldIndex, newIndex }) => {\n    this.props.setTabPlots(\n      this.props.active.tab,\n      arrayMove( _.find(this.props.tabs,[\"id\", this.props.active.tab]).plots, oldIndex, newIndex)\n    );\n  };\n\n  render() {\n\n    if (!this.props.active.tab ) return null\n\n    let tab = _.find(this.props.tabs, [\"id\", this.props.active.tab])\n\n    if (!tab) return null\n    \n    let plots = tab.plots.map(plotID => this.props.plots[plotID])\n\n    return (\n      <div>\n        <SortableList\n          axis=\"xy\"\n          useDragHandle\n          transitionDuration={0}\n          plots={plots}\n          onSortEnd={this.onSortEnd}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  plots: state.plots,\n  structures: state.structures,\n  tabs: state.tabs,\n  active: state.active\n})\n\nconst mapDispatchToProps = dispatch => ({\n  setTabPlots: (tabID, plots) => dispatch(setTabPlots(tabID, plots)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlotDashboard);","import React, { Component } from 'react'\n\nimport _ from \"lodash\"\n\n//--Components\nimport { Button, Row, Card, Col, Icon, Switch, Chip} from 'react-materialize'\nimport ReactTooltip from \"react-tooltip\"\nimport Select from 'react-select'\nimport PlotDashboard from '../components/PlotDashboard';\n\n//--Python api \nimport PythonApi from '../apis/PythonApi'\n\n//--Redux\nimport { connect } from 'react-redux'\nimport {addPlots, addTabs, setNewStructures, setActiveTab, setActivePlot, setSessionTabs, setCurrentSession} from \"../redux/actions\"\n\n\nclass Plots extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            displayPlotInitializer: false,\n            plotToInitialize: {\n                struct: false,\n                animation: false\n            },\n            loadingPlots: [],\n            plotOptions:[]\n        }\n\n        this.syncWithSession()\n            \n    }\n\n    syncWithSession = (session) => {\n\n        this.updateTabs()\n\n        PythonApi.getPlotOptions( plotOptions => this.setState({plotOptions}) )\n        PythonApi.getAvailableStructs( structures => this.props.setNewStructures(structures) )\n        \n        if (session){\n            this.props.setCurrentSession(session)\n        } else {\n            PythonApi.getSessionSettings(session => this.props.setCurrentSession(session))\n        }\n        \n    }\n\n    componentDidMount(){\n\n        this.props.setActivePlot(undefined)\n        \n    }\n\n    componentDidUpdate(){\n\n        let activeTab = _.find(this.props.tabs, [\"id\", this.props.active.tab]) \n        \n        if (!activeTab) return\n\n        //Get the missing plots if there are any\n        activeTab.plots.forEach(plotID => {\n\n            if ( !this.props.plots[plotID] && this.state.loadingPlots.indexOf(plotID) == -1){\n\n                this.setState({loadingPlots: [...this.state.loadingPlots, plotID]})\n                PythonApi.getPlot(plotID, plot => {\n                    this.props.addPlots({[plot.id]: plot})\n                    this.setState({loadingPlots: this.state.loadingPlots.filter(id => id != plotID)})\n                })\n                \n            }\n        })\n\n    }\n\n    updateTabs = (tabs) => {\n\n        if (tabs){\n            this.props.setSessionTabs(tabs)\n\n        } else {\n            PythonApi.getSessionTabs( tabs => {\n                this.props.setSessionTabs(tabs)\n                \n                let activeTab = _.find(tabs, [\"id\", this.props.active.tab])\n\n                if (!activeTab) this.props.setActiveTab( tabs.length > 0 ? tabs[0].id : undefined)\n            })\n        }\n\n    }\n\n    newTab = () => {\n\n        PythonApi.addNewTab( (tabs) => {\n            this.updateTabs(tabs)\n            this.props.setActiveTab(_.last(tabs).id)\n        })\n        \n\n    }\n\n    removeTab = (tabID) => {\n\n        let iDeletedTab = _.findIndex(this.props.tabs, [\"id\", tabID])\n\n        PythonApi.removeTab(tabID, (tabs) => {\n            this.props.setActiveTab(tabs.length > 0 ? tabs[Math.min(tabs.length - 1, iDeletedTab)].id : undefined)\n            this.updateTabs(tabs)\n        })\n\n    }\n\n    updateTabParams = (tabID, newTabParams) => {\n\n        PythonApi.updateTabParams(tabID, newTabParams, (tabs) => {\n            this.updateTabs(tabs)\n        })\n    }\n\n    updateTabName = (e) => {e.target.blur(); this.updateTabParams(e.target.id, {name: e.target.textContent})}\n\n    getNewPlot = () => {\n\n        this.setState({isLoading: true})\n\n        PythonApi.getNewPlot({tabID: this.props.active.tab, ...this.state.plotToInitialize}, (plot, reqParams) => {\n\n            this.updateTabs()\n            this.props.addPlots({[plot.id]: plot})\n\n            this.togglePlotInitializer()\n            this.props.setActiveTab(reqParams.tabID)\n            this.setState({isLoading: false})\n        })\n\n    }\n\n    saveCurrentSession = () => {\n        let path = prompt(\"Please provide the path to save the session.\\n\\nRoot directory:\\n\" + this.props.session.settings.rootDir)\n        if (!path) return \n\n        PythonApi.saveSession({path})\n        alert(\"Session saved\")\n    }\n\n    loadSession = () => {\n\n        let path = prompt(\"Please provide the path of the saved session.\\n\\nRoot directory:\\n\" + this.props.session.settings.rootDir)\n        if (!path) return\n\n        PythonApi.loadSession({path}, (session) => {\n            console.log(\"Session loaded\", session)\n            this.syncWithSession(session)\n        })\n    }\n\n    togglePlotInitializer = () => {\n\n        if (!this.state.displayPlotInitializer) window.scrollTo({ top: 0, behavior: 'smooth' })\n\n        this.setState({\n            displayPlotInitializer: !this.state.displayPlotInitializer\n        })\n\n    }\n\n    updateInitializingOptions = (key, value) => {\n        this.setState({\n            plotToInitialize: {...this.state.plotToInitialize, [key]: value}\n        })\n    }\n\n    renderPlotInitializer  = () => {\n\n        if (this.props.tabs.length == 0) return null\n\n        let loadingMessage = this.state.isLoading ? <Row>We are getting your shiny new plot... wait a moment please :)</Row> : null\n\n        return (\n\n            <Card\n                style={{marginLeft: 20, marginRight: 20, background: \"#5588ff\"}}\n                actions={\n                    <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"center\", alignItems: \"center\"}}>\n\n                        <a\n                            className=\"btn-flat black-text initPlotBtn\"\n                            onClick={this.togglePlotInitializer}>\n                            Dismiss\n                            <Icon right>close</Icon>\n                        </a>\n\n                        <a \n                            className=\"btn-flat black-text initPlotBtn\"\n                            onClick={this.getNewPlot}\n                            >\n                            Initialize plot\n                            <Icon right>done</Icon>\n                        </a>\n\n                        <a className=\"btn-flat black-text initPlotBtn\"><Icon>refresh</Icon></a>\n                    </div>     \n                }>\n                <Row>\n                    <Col s={12} m={12} l={6}>\n                        <Row>Structures</Row>\n\n                        <Row>\n                            {Object.keys(this.props.structures).map(structID => {\n\n                                let selected = this.state.plotToInitialize.struct == structID ? \"selected\" : null\n\n                                return <Col s={12} m={6} l={4}>\n                                    <div className={\"structureCell \" + selected} onClick={()=>this.updateInitializingOptions(\"struct\", structID)}>{this.props.structures[structID].name}</div>\n                                </Col>\n                            })}\n                        </Row>\n                        \n                        {/* <Select\n                            options={Object.keys(this.props.structures).map(structID => ({label: this.props.structures[structID].name, value: structID}))}\n                            placeholder=\"Choose a structure...\"\n                            onChange={value => this.updateInitializingOptions(\"struct\", value)}/> */}\n                    </Col>\n                    \n                    <Col s={12} m={6} l={3}>\n                        <Row>Plot type</Row>\n                        <Select\n                            options={this.state.plotOptions}\n                            placeholder=\"Choose the plot type...\"\n                            isClearable isSearchable\n                            onChange={(obj) => this.updateInitializingOptions(\"plotClass\", obj ? obj.value : undefined)}/>\n                    </Col>\n                    \n                    <Col s={12} m={6} l={2}>\n                        <Row>Tab</Row>\n                        <Select\n                            placeholder=\"Choose a tab...\"\n                            options={this.props.tabs.map( (tab) => ({label: tab.name, value: tab.id }))}\n                            defaultValue={this.props.active.tab && _.find(this.props.tabs, [\"id\", this.props.active.tab])? {label: _.find(this.props.tabs, [\"id\", this.props.active.tab]).name, value: this.props.active.tab } : null}\n                            isClearable isSearchable\n                            onChange={(obj) => this.updateInitializingOptions(\"tabID\", obj ? obj.value : undefined)}/>\n                    </Col>\n\n                    <Col s={12} m={6} l={1}>\n                        <Row>Animation</Row>\n                        <Switch\n                            id=\"isAnimation\"\n                            checked={this.state.plotToInitialize.animation}\n                            onChange={(e) => this.updateInitializingOptions(\"animation\", e.target.checked) }/>\n                    </Col>\n                    \n                </Row>\n                {loadingMessage}\n            </Card>\n            \n        )\n    }\n\n    renderNewPlotButton = (isInitializerDisplaying) => {\n\n        let addNewPlotBut = isInitializerDisplaying ? null : (\n            <Button\n                data-tip=\"New plot\"\n                floating \n                onClick={this.togglePlotInitializer}\n                icon={<Icon>add</Icon>} className=\"green\" />\n        )\n\n        return <Button\n                    floating\n                    icon={<Icon>menu</Icon>}\n                    fab={{direction: 'left', hoverEnabled: false}}\n                    className={Object.keys(this.props.plots).length == 0 && !this.state.displayPlotInitializer? \"red pulse\" : \"red\"}\n                    large\n                >\n                    <ReactTooltip multiline disable={this.props.session.settings ? !this.props.session.settings.showTooltips : false}/>\n                    {addNewPlotBut}\n                    <Button\n                        data-tip=\"Save session\"\n                        floating\n                        icon={<Icon>save</Icon>} \n                        onClick={this.saveCurrentSession}\n                        className=\"yellow darken-1\" />\n                    <Button\n                        data-tip=\"Load session\"\n                        floating\n                        icon={<Icon>open_in_new</Icon>}\n                        onClick={this.loadSession}\n                        className=\"green\" />\n                    <Button floating icon={<Icon />} className=\"blue\" />\n                </Button>\n\n    }\n\n    render() {\n\n        let tabs = this.props.tabs.map( ({id: tabID, name: tabName}) => {\n\n            let active = tabID == this.props.active.tab\n\n            return <div\n                    key={tabID}\n                    className={active ? \"active plotTab\" : \"plotTab\"}\n                    onClick={active ? null : ()=> this.props.setActiveTab(tabID)}>\n                <div\n                    id={tabID}\n                    contentEditable={active}\n                    \n                    onBlur={this.updateTabName}\n                    onKeyUp={(e) => {if (e.keyCode === 13) this.updateTabName(e)}}\n                    >{tabName}</div>\n                {active ? <div className=\"removeTabBut\" onClick={() => this.removeTab(tabID)}><Icon>remove_circle</Icon></div> : null}\n            </div>\n        })\n\n        return (\n            <div>\n                <div style={{display: \"flex\", flexWrap: \"wrap\", padding: \"0px 20px\", paddingLeft: 80, alignItems:\"center\"}}>\n                    <div onClick={this.newTab} data-tip=\"New tab\">\n                        <Icon\n                            className=\"newTabIcon small blue-text text-darken-3\"\n                            style={{paddingRight: 0}}>create_new_folder</Icon>\n                    </div>\n                    {tabs}\n                </div>\n                <Row className={\"plotInitializer\" + (this.state.displayPlotInitializer ? \"\" : \" hidden\")}>\n                    <Col s={12}>\n                        {this.renderPlotInitializer()}\n                    </Col>\n                </Row>\n                <Row>\n                    {this.renderNewPlotButton(this.state.displayPlotInitializer)}\n                </Row>\n                <PlotDashboard/>\n                <ReactTooltip multiline disable={this.props.session.settings ? !this.props.session.settings.showTooltips : false}/>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    plots: state.plots,\n    structures: state.structures,\n    tabs: state.tabs,\n    active: state.active,\n    session: state.session\n})\n\nconst mapDispatchToProps = dispatch => ({\n    setCurrentSession: (session) => dispatch(setCurrentSession(session)),\n    setActiveTab: (tabID) => dispatch(setActiveTab(tabID)),\n    setSessionTabs: (tabs) => dispatch(setSessionTabs(tabs)),\n    setActivePlot: (plot) => dispatch(setActivePlot(plot)),\n    addPlots: (newPlots, tabsIDs) => dispatch(addPlots(newPlots, tabsIDs)),\n    addTabs: (newTabs) => dispatch(addTabs(newTabs)),\n    setNewStructures: (structures) => dispatch(setNewStructures(structures)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Plots);","import React, { Component } from 'react'\n\n//--Components\nimport { Card, TextInput, Switch, Button } from 'react-materialize'\nimport Select from \"react-select\"\nimport { ChromePicker } from \"react-color\"\nimport { Range } from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\nimport _ from \"lodash\"\n\nexport default class QueriesField extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {\n            displayColorPicker: {}\n        }\n    }\n\n    toggleColorPicker = (pickerID) => {\n        this.setState({ displayColorPicker: {\n            ...this.state.displayColorPicker,\n            [pickerID] : ! this.state.displayColorPicker[pickerID]\n        } })\n    };\n\n    addQuery = () => {\n\n        let newQuery = this.props.setting.inputField.queryForm.reduce((map, queryParam) => {\n            map[queryParam.key] = queryParam.default || null\n            return map\n        }, {})\n\n        newQuery.active = true\n\n        this.props.changeSettingValue([...this.props.value, newQuery])\n    }\n\n    changeSettingValue = (iQuery, paramKey, paramValue) => {\n\n        let newValue = _.cloneDeep(this.props.value)\n\n        newValue[iQuery] = { ...newValue[iQuery], [paramKey]: paramValue}\n\n        this.props.changeSettingValue(newValue)\n    }\n\n    renderInputField = (queryParam, value, iQuery) => {\n\n        let inputField = queryParam.inputField\n\n        if (!inputField) return null\n\n        let fieldLayout;\n\n        if (inputField.type == \"textinput\"){\n\n            fieldLayout = <TextInput\n                    noLayout\n                    value={value}\n                    onChange={(e) => this.changeSettingValue(iQuery, queryParam.key, e.target.value)}\n                    label={queryParam.name}\n                    {...inputField.params}/>\n\n        } else if (inputField.type == \"switch\"){\n\n            fieldLayout = <div style={{display:\"flex\", flexDirection:\"column\", justifyContent:\"center\", alignItems:\"center\"}}>\n                    <div style={{paddingBottom: 10}}>{queryParam.name}</div>\n                    <Switch\n                        id = {iQuery+queryParam.key}\n                        checked={value}\n                        onChange={(e) => this.changeSettingValue(iQuery, queryParam.key, e.target.checked) }\n                        {...inputField.params}/>\n                </div>\n\n        } else if (inputField.type == \"dropdown\") {\n\n            fieldLayout = <div style={{display:\"flex\", justifyContent:\"center\", alignItems:\"center\"}}>\n                <div style={{paddingRight: 20}}>{queryParam.name + \":\"}</div>\n                <Select\n                        className=\"querySelect\"\n                        value={ Array.isArray(value) ? value.map(val => _.find(inputField.params.options, {value: val})) : _.find(inputField.params.options, {value: value})}\n                        onChange={(obj) => this.changeSettingValue(iQuery, queryParam.key, \n                            Array.isArray(obj) ? obj.map(obj => obj.value) : obj ? obj.value : null )}\n                        {...inputField.params}/>\n                </div>\n\n        } else if (inputField.type == \"color\") {\n\n            let pickerID = String(iQuery) + queryParam.key\n\n            let colorPicker = this.state.displayColorPicker && this.state.displayColorPicker[pickerID] ? (\n                <div style={{position: \"absolute\", bottom: 60}}>\n                    <ChromePicker\n                        color={value ? value : \"#00F0F8FF\"}\n                        onChangeComplete={(color) => this.changeSettingValue(iQuery, queryParam.key, color.hex)}\n                        {...inputField.params}/>\n                </div>\n            ) : null;\n\n            fieldLayout = <div style={{position: \"relative\",display:\"flex\", flexDirection:\"column\", justifyContent:\"center\", alignItems:\"center\"}}>\n                    <div style={{paddingBottom: 10}}>{queryParam.name}</div>\n                    <div \n                        className=\"z-depth-2\"\n                        onClick={() => this.toggleColorPicker(pickerID)}\n                        style={{width: 30, height: 30, borderRadius: 30, background: value}}/>\n                    \n                    {colorPicker}\n                </div>\n        } else if (inputField.type == \"rangeslider\"){\n\n            fieldLayout = <div style={{paddingLeft: \"10%\", paddingRight: \"10%\"}}>\n            <div style={{paddingBottom: 10}}>{queryParam.name}</div>\n            <Range\n                value={value}\n                onChange={(value) => this.changeSettingValue(iQuery, queryParam.key, value)}\n                {...inputField.params}/>\n          </div>\n\n        } else if (inputField.type == \"number\"){\n\n            fieldLayout = <div>\n                <div style={{paddingBottom: 10}}>{queryParam.name}</div>\n                <input\n                    type=\"number\"\n                    value={value}\n                    onChange={(e) => this.changeSettingValue( iQuery, queryParam.key, Number(e.target.value) )}\n                    {...inputField.params}/>\n                </div>\n        }\n\n        return <div style={{marginBottom: 5, marginTop: 5, paddingLeft: 10, paddingRight: 10, width: this.props.w(inputField.width), ...inputField.style}}>{fieldLayout}</div>\n    }\n\n    renderQuery = (query, iQuery) => {\n\n        return (\n\n            <div key={iQuery} style={{display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n                <Switch\n                    id={iQuery+\"active\"}\n                    checked={query.active}\n                    onChange={(e) => this.changeSettingValue(iQuery, \"active\", e.target.checked) }/>\n                <Card className=\"queryCard\" style={{flex: 1, background: query.active ? \"#CBFFC0\" : \"#ffc3cd\", borderRadius: 10}}>\n                    <div style={{display:\"flex\", flexWrap: \"wrap\", justifyContent: \"space-around\"}}>\n                        {this.props.setting.inputField.queryForm.map(queryParam => this.renderInputField(queryParam, query[queryParam.key], iQuery))}\n                    </div>   \n                </Card>\n            </div>\n            \n        )\n\n    }\n\n    render() {\n\n        return (\n            <div>\n                {this.props.value.map( (query, iQuery) => this.renderQuery(query, iQuery))}\n                <Button\n                    data-tip=\"Add a new query\"\n                    onClick={this.addQuery}>\n                    Add Query\n                </Button>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\n\n//--Components\nimport { TextInput, Switch } from 'react-materialize'\nimport Select from \"react-select\"\nimport { ChromePicker } from \"react-color\"\nimport { Range } from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\nimport _ from \"lodash\"\n\n//--Redux\nimport { connect } from 'react-redux'\nimport { changeSettings } from \"../../redux/actions\"\nimport QueriesField from './QueriesField';\n\nclass InputField extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state ={}\n    }\n\n    w = (string) => {\n\n        if (!string) return undefined\n\n        let isSizeDefined = [\"s\", \"m\", \"l\"].map(sizeLabel => string.indexOf(sizeLabel) >= 0)\n\n        let iWindowSize = [\"small\", \"medium\", \"infinity\"].indexOf(this.props.browser.mediaType)\n\n        for (var i = iWindowSize; i > -1; i--) {\n            \n            if(isSizeDefined[i]){\n                let width = _.find(string.split(\" \"), (str) => str.indexOf([\"s\",\"m\",\"l\"][i]) >= 0)\n                return width.substr(1)\n            }\n          }\n\n        return undefined\n    }\n\n    changeSettingValue = (newValue) => {\n\n        this.props.changeSettings(this.props.onSettingChangeType, this.props.setting.key, newValue)\n        \n    }\n    \n    toggleColorPicker = () => {\n        this.setState({ displayColorPicker: !this.state.displayColorPicker })\n    };\n\n    render() {\n\n        let inputField = this.props.setting.inputField\n        let fieldLayout;\n\n        if (inputField.type == \"textinput\"){\n\n            fieldLayout = <TextInput\n                    noLayout\n                    value={this.props.value}\n                    onChange={(e) => this.changeSettingValue(e.target.value)}\n                    label={this.props.setting.name}\n                    {...inputField.params}/>\n\n        } else if (inputField.type == \"switch\"){\n\n            fieldLayout = <div style={{display:\"flex\", flexDirection:\"column\", justifyContent:\"center\", alignItems:\"center\"}}>\n                    <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n                    <Switch\n                        id = {this.props.setting.key}\n                        checked={this.props.value}\n                        onChange={(e) => this.changeSettingValue(e.target.checked) }\n                        {...inputField.params}/>\n                </div>\n\n        } else if (inputField.type == \"dropdown\") {\n\n            fieldLayout = <div style={{display:\"flex\", justifyContent:\"center\", alignItems:\"center\"}}>\n                <div style={{paddingRight: 20}}>{this.props.setting.name + \":\"}</div>\n                <Select\n                        value={ Array.isArray(this.props.value) ? this.props.value.map(val => _.find(inputField.params.options, {value: val})) : _.find(inputField.params.options, {value: this.props.value})}\n                        onChange={(obj) => this.changeSettingValue(Array.isArray(obj) ? obj.map(obj => obj.value) : obj ? obj.value : null )}\n                        {...inputField.params}/>\n                </div>\n\n        } else if (inputField.type == \"color\") {\n\n            let colorPicker = this.state.displayColorPicker ? (\n                <div style={{position: \"absolute\", bottom: 60}}>\n                    <ChromePicker\n                        color={this.props.value}\n                        onChangeComplete={(color) => this.changeSettingValue(color.hex)}\n                        {...inputField.params}/>\n                </div>\n            ) : null;\n\n            fieldLayout = <div style={{position: \"relative\",display:\"flex\", flexDirection:\"column\", justifyContent:\"center\", alignItems:\"center\"}}>\n                    <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n                    <div \n                        className=\"z-depth-2\"\n                        onClick={this.toggleColorPicker}\n                        style={{width: 30, height: 30, borderRadius: 30, background: this.props.value}}/>\n                    \n                    {colorPicker}\n                </div>\n        } else if (inputField.type == \"rangeslider\"){\n\n            fieldLayout = <div style={{paddingLeft: \"10%\", paddingRight: \"10%\"}}>\n            <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n            <Range\n                value={this.props.value}\n                onChange={(value) => this.changeSettingValue(value)}\n                {...inputField.params}/>\n          </div>\n\n        } else if (inputField.type == \"number\"){\n\n            fieldLayout = <div>\n                <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n                <input\n                    type=\"number\"\n                    value={this.props.value}\n                    onChange={(e) => this.changeSettingValue( Number(e.target.value) )}\n                    {...inputField.params}/>\n                </div>\n        } else if (inputField.type == \"queries\"){\n\n            fieldLayout = <div>\n                <div style={{paddingBottom: 10}}>{this.props.setting.name}</div>\n                <QueriesField \n                    changeSettingValue={this.changeSettingValue}\n                    setting={this.props.setting}\n                    value={this.props.value}\n                    w={this.w}/>\n            </div>\n        }\n\n        let tooltipParams = {\n            \"data-tip\": (this.props.setting.help ? this.props.setting.help + \"<br>\" : \"\") + \"Default: \" + (this.props.setting.default || \"None\"),\n            \"data-multiline\": true,\n            \"data-effect\": \"solid\",\n            \"data-place\": inputField.type == \"color\" ? \"bottom\" : \"top\", \n        }\n\n        return <div style={{marginTop: 20, marginBottom: 20, width: this.w(inputField.width), ...inputField.style}} {...tooltipParams}>{fieldLayout}</div>\n\n    }\n}\n\nconst mapStateToProps = state => ({\n    browser: state.browser\n})\n\nconst mapDispatchToProps = dispatch => ({\n    changeSettings: (actionType, settingKey, newValue) => dispatch(changeSettings(actionType, settingKey, newValue)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InputField);\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { Row, Collapsible, CollapsibleItem, Icon, Col, Button} from 'react-materialize'\nimport InputField from \"./InputField\"\n\nimport parse from 'html-react-parser';\nimport _ from \"lodash\"\n\nexport default class SettingsContainer extends Component {\n\n    renderSettingsGroup = (settingsGroup) => {\n\n        return settingsGroup.map(setting => {\n\n            if (!setting.inputField) return null\n        \n            return <InputField \n                        key={setting.key}\n                        setting={setting} \n                        value={this.props.settings[setting.key]}\n                        onSettingChangeType={this.props.onSettingChangeType}/>\n        }) \n    }\n\n    renderSettingsGroups = (groupedParams) => {\n\n        return this.props.paramGroups.map(paramGroup => {\n\n            let groupKey = paramGroup.key ? paramGroup.key : \"null\";\n\n            let settingsGroup = groupedParams[groupKey]\n\n            if (!settingsGroup) return null\n\n            let subGrouped = _.groupBy(settingsGroup, \"subGroup\")\n\n            let subGroups = paramGroup.subGroups ? [{key: \"null\", name: null},  ...paramGroup.subGroups] : [{key: \"null\", name: null}]\n\n            let itemContent = subGroups.map(({key, name}) => {\n\n                if ( ! subGrouped[key] ) return null\n                \n                return <div key={key}>\n                    <div style={{paddingBottom: 20, fontWeight:\"bold\", fontSize: \"1.3em\", textAlign: \"left\"}}>{name}</div>\n                    <div style={{display: \"flex\", flexWrap: \"wrap\", justifyContent: \"space-around\", alignItems: \"center\"}}>{this.renderSettingsGroup(subGrouped[key])}</div>\n                </div>\n            })\n\n            \n\n            return (\n                <CollapsibleItem\n                    key={groupKey}\n                    header={paramGroup.name} \n                    icon={<Icon>{paramGroup.icon}</Icon>}>\n                    <blockquote style={{textAlign: \"left\"}}>\n                        {parse(paramGroup.description)}\n                    </blockquote>\n                    {itemContent}\n                    <div style={{display: \"flex\", flexWrap: \"wrap\", justifyContent: \"space-around\"}}>\n                        <Button\n                            onClick={this.props.undoSettings}\n                            data-tip=\"This will roll back to previous settings.<br> IT AFFECTS ALL GROUPS OF PARAMETERS, not only this one.\"\n                            className=\"orange\"\n                            style={{margin:20}}>\n                                <Icon left>arrow_back_ios</Icon>Previous settings\n                        </Button>\n\n                        <Button\n                            data-tip=\"This will restore all settings to the plot's defaults\"\n                            className=\"red\" style={{margin:20}}><Icon left>refresh</Icon>Restore defaults</Button>\n\n                        <Button\n                            data-tip=\"This will change the settings and will update everything accordingly.<br> IT ONLY AFFECTS THIS GROUP OF SETTINGS, not all settings\"\n                            onClick={() => this.props.submitSettings( settingsGroup.reduce((settings, setting) => {\n                                settings[setting.key] = this.props.settings[setting.key]\n                                return settings\n                            }, {}))}\n                            className=\"blue\" \n                            style={{margin:20}}>\n                                Submit settings<Icon right>arrow_forward_ios</Icon>\n                        </Button>\n                        \n                    </div>\n                </CollapsibleItem> \n            )\n\n        })\n    }\n\n    render() {\n\n        let groupedParams = _.groupBy(this.props.params, \"group\")\n\n        return (\n            <Collapsible popout>\n                {this.renderSettingsGroups(groupedParams)}          \n            </Collapsible>\n        )\n    }\n}\n\n","import React, { Component } from 'react'\nimport PythonApi from \"../apis/PythonApi\"\n\n//--Components\nimport ReactTooltip from \"react-tooltip\"\nimport SettingsContainer from \"../components/settings/SettingsContainer\"\n\n//--Redux\nimport { connect } from 'react-redux'\nimport { setCurrentSession } from \"../redux/actions\"\n\nimport _ from \"lodash\"\nimport { CHANGE_SESSION_SETTINGS } from '../redux/actions/actionTypes'\n\nclass Settings extends Component {\n\n    constructor(props){\n        super(props)\n\n        this.state = {}\n    }\n\n    submitSettings = (settings) => {\n\n        PythonApi.updateSessionSettings(this.props.session.id, settings, (session) => {\n            this.props.setCurrentSession(session)\n            alert(\"Session settings have been updated\")   \n        })\n    }\n\n    undoSettings = () => {\n\n        PythonApi.undoSessionSettings(this.props.session.id, (session) => {\n            this.props.setCurrentSession(session)\n            alert(\"Session settings have been rolled back\")  \n            \n        })\n    }\n\n    componentDidMount(){\n        PythonApi.getSessionSettings( session => this.props.setCurrentSession(session))\n    }\n\n    render() {\n\n        if ( _.isEmpty(this.props.session) ) return null\n\n        return (\n            <div style={{padding: 20}}>\n                <SettingsContainer\n                    settings={this.props.session.settings}\n                    params={this.props.session.params}\n                    paramGroups={this.props.session.paramGroups}\n                    onSettingChangeType={CHANGE_SESSION_SETTINGS}\n                    submitSettings={this.submitSettings}\n                    undoSettings={this.undoSettings}/>\n                <ReactTooltip multiline disable={this.props.session.settings ? !this.props.session.settings.showTooltips : false}/>\n            </div>\n            \n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    session: state.session\n})\n\nconst mapDispatchToProps = dispatch => ({\n    setCurrentSession: (session) => dispatch(setCurrentSession(session)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Settings);\n","import React, { Component } from 'react'\nimport { Row, Col} from 'react-materialize'\nimport ReactTooltip from \"react-tooltip\"\n\nimport PythonApi from \"../apis/PythonApi\"\n\n//--Components\nimport PlotCard from '../components/PlotCard'\nimport SettingsContainer from '../components/settings/SettingsContainer'\n\n//--Redux\nimport { connect } from 'react-redux'\nimport { addPlots, setNewStructures, setActivePlot, setCurrentSession } from \"../redux/actions\"\nimport { CHANGE_PLOT_SETTINGS } from '../redux/actions/actionTypes'\n\n\n\nclass PlotTweaking extends Component {\n\n    componentDidMount(){\n\n        PythonApi.getSessionSettings(session => this.props.setCurrentSession(session))\n    }\n\n    submitSettings = (settings) => {\n\n        PythonApi.updatePlotSettings(this.props.active.plot.id, settings, (plot) => {\n            this.props.addPlots( {[plot.id]: plot})\n\n            if (this.props.active.plot.id == plot.id){\n                this.props.setActivePlot(plot)\n            }\n            \n        })\n    }\n\n    undoSettings = () => {\n\n        PythonApi.undoPlotSettings(this.props.active.plot.id, (plot) => {\n            this.props.addPlots( {[plot.id]: plot})\n\n            if (this.props.active.plot.id == plot.id){\n                this.props.setActivePlot(plot)\n            }\n            \n        })\n    }\n\n    render() {\n\n        if (! this.props.active.plot ) return null\n\n        let setsCont = <SettingsContainer\n                            settings={this.props.active.plot.settings}\n                            params={this.props.active.plot.params}\n                            paramGroups={this.props.active.plot.paramGroups}\n                            onSettingChangeType={CHANGE_PLOT_SETTINGS}\n                            submitSettings={this.submitSettings}\n                            undoSettings={this.undoSettings}/>\n        \n        return (\n            <div>\n                <Row>\n                    <Col className=\"s12 l4\">\n                        <PlotCard plot={this.props.active.plot} plotStyle={{height:\"75vh\"}}/>\n                    </Col>\n                    <Col className=\"s12 l8\" >\n                        {this.props.browser.mediaType == \"infinity\" ? <div className=\"scrollView\" style={{ maxHeight: \"90vh\" }}>{setsCont}</div> : setsCont}\n                    </Col>\n                </Row>\n                <ReactTooltip multiline disable={this.props.session.settings ? !this.props.session.settings.showTooltips : false}/>  \n            </div>\n            \n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    plots: state.plots,\n    structures: state.structures,\n    active: state.active,\n    session: state.session,\n    browser: state.browser\n})\n\nconst mapDispatchToProps = dispatch => ({\n    setCurrentSession: (session) => dispatch(setCurrentSession(session)),\n    addPlots: (newPlots, tabsIDs) => dispatch(addPlots(newPlots, tabsIDs)),\n    setActivePlot: (plot) => dispatch(setActivePlot(plot)),\n    setNewStructures: (structures) => dispatch(setNewStructures(structures)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PlotTweaking);\n","import React from \"react\";\nimport { Switch } from \"react-router-dom\";\nimport Route from \"./Route\";\n\nimport Plots from \"../pages/Plots\";\nimport Settings from \"../pages/Settings\";\nimport PlotTweaking from \"../pages/PlotTweaking\";\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route path=\"/plots\" exact component={Plots} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route path=\"/plotTweaking\" component={PlotTweaking}/>\n\n      {/* redirect user to SignIn page if route does not exist and user is not authenticated */}\n      <Route component={Plots} />\n    </Switch>\n  );\n}\n","import { CLEAR_SESSION, SET_SESSION, CHANGE_SESSION_SETTINGS} from '../actions/actionTypes'\nimport _ from \"lodash\"\n\nconst defaultState = {}\n\nconst session = (state = defaultState, action) => {\n\n    switch (action.type) {\n        case SET_SESSION:\n            console.log(\"REDUX: Setting current session...\")\n            var newState = action.session\n            console.log(newState)\n\n            return newState\n        \n        case CHANGE_SESSION_SETTINGS:\n            console.log(\"REDUX: Changing current session settings (not submitting yet)...\")\n            var newState = {\n                ...state,\n                settings: {\n                    ...state.settings,\n                    [action.settingKey]: action.value\n                }\n            }\n            console.log(newState)\n            return newState\n\n        \n        case CLEAR_SESSION:\n            return defaultState\n\n        default:\n            return state\n    }\n}\n\nexport default session","import { ADD_PLOTS, CLEAR_SESSION, REMOVE_PLOT } from '../actions/actionTypes'\nimport _ from \"lodash\"\n\nconst defaultState = {};\n\nconst plots = (state = defaultState, action) => {\n    switch (action.type) {\n        case ADD_PLOTS:\n            console.log(\"REDUX: Storing a new plot...\")\n            let newState = {\n                ...state,\n                ...action.newPlots,\n            }\n            console.log(newState)\n            return newState\n        \n        case REMOVE_PLOT:\n            return _.omit(state, [action.plotID])\n        \n        case CLEAR_SESSION:\n            return defaultState\n            \n        default:\n            return state\n    }\n}\n\nexport default plots","import { SET_STRUCTURES, CLEAR_SESSION } from '../actions/actionTypes'\n\nconst defaultState = {}\n\nconst structures = (state = defaultState, action) => {\n    switch (action.type) {\n        case SET_STRUCTURES:\n            console.log(\"REDUX: Setting the new structures...\")\n            let newState = {\n                ...action.newStructures\n            }\n            console.log(newState)\n            return newState\n\n        default:\n            return state\n    }\n}\n\nexport default structures","import { CLEAR_SESSION, SET_SESSION_TABS} from '../actions/actionTypes'\nimport _ from \"lodash\"\n\nconst defaultState = []\n\nconst tabs = (state = defaultState, action) => {\n\n    switch (action.type) {\n        case SET_SESSION_TABS:\n            console.log(\"REDUX: Setting session tabs...\")\n            var newState = action.tabs\n            console.log(newState)\n\n            return newState\n        \n        case CLEAR_SESSION:\n            return defaultState\n\n        default:\n            return state\n    }\n}\n\nexport default tabs","import { \n    SET_ACTIVE_PLOT,\n    SET_ACTIVE_TAB,\n    CLEAR_SESSION,\n    CHANGE_PLOT_SETTINGS\n} from '../actions/actionTypes'\n\nconst defaultState = {plot: undefined, tab: undefined};\n\nconst active = (state = defaultState, action) => {\n    switch (action.type) {\n        case SET_ACTIVE_PLOT:\n            console.log(\"REDUX: Setting active plot...\")\n            var newState = {\n                ...state,\n                plot: action.activePlot,\n            }\n            console.log(newState)\n            return newState\n        \n        case CHANGE_PLOT_SETTINGS:\n            console.log(\"REDUX: Changing plot settings (not submitting yet)...\")\n            var newState = {\n                ...state,\n                plot: {\n                    ...state.plot,\n                    settings: {\n                        ...state.plot.settings,\n                        [action.settingKey]: action.value\n                    }\n                },\n            }\n            console.log(newState)\n            return newState\n\n        case SET_ACTIVE_TAB:\n            console.log(\"REDUX: Setting active tab...\")\n            var newState = {\n                ...state,\n                tab: action.activeTab,\n            }\n            console.log(newState)\n            return newState\n        \n        case CLEAR_SESSION:\n            return defaultState\n                \n        default:\n            return state\n    }\n}\n\nexport default active","import { combineReducers } from 'redux'\nimport {createResponsiveStateReducer} from 'redux-responsive'\n\nimport session from './session'\nimport plots from './plots'\nimport structures from './structures'\nimport tabs from './tabs'\nimport active from './active'\n\nexport default combineReducers({\n    session,\n    plots,\n    structures,\n    tabs,\n    active,\n    browser: createResponsiveStateReducer({\n        small: 600,\n        medium: 992,\n    })\n})","import { createStore } from 'redux'\nimport {responsiveStoreEnhancer} from 'redux-responsive'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport localForage from \"localforage\";\nimport storage from \"redux-persist/lib/storage\"\n\nimport rootReducer from '../reducers'\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: [\"active\", \"structures\"]\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport default () => {\n  let store = createStore(persistedReducer, responsiveStoreEnhancer)\n  let persistor = persistStore(store)\n  //persistor.purge()\n  return { store, persistor }\n}","import React from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\"\n\n//--Navigation\nimport { Router } from 'react-router-dom';\nimport history from './apis/history';\nimport Routes from './routes';\n\n//--Redux\nimport getStoreAndPersistor from './redux/store'\nimport { Provider } from 'react-redux'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nconst {store, persistor} = getStoreAndPersistor()\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <div className=\"App\" style={{display: \"flex\", flexDirection: \"column\"}}>\n          <Navbar />\n          <div className = \"appContent\" style={{flex: 1}}>\n            <Router history={history}>\n              <Routes />\n            </Router>\n          </div>   \n        </div>\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}